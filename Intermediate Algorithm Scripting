//Now that you know the basics of algorithmic thinking, along with OOP and Functional Programming, 
//    test your skills with the Intermediate Algorithm Scripting challenges.

//Sum All Numbers in a Range
//We'll pass you an array of two numbers. 
//Return the sum of those two numbers plus the sum of all the numbers between them. 
//The lowest number will not always come first.

//For example, 'sumAll([4,1])' should return '10' because sum of all the numbers between 1 and 4 (both inclusive) is '10'.


//UNCHANGED CODE:

//    function sumAll(arr) {
//      return 1;
//    }

//    sumAll([1, 4]);

//CHANGED CODE:
///////////////////1st Experiment
function sumAll(arr) {
  console.log(arr);
  let newArr = arr.slice().sort();
  console.log(newArr);
  let difference = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] > newArr[i]) {
      difference.push(arr[i] - newArr[i]);
      console.log(difference);
    } else if(arr[i] = newArr[i]) {
      let invertArr = [];
      invertArr.push(newArr.pop());
      console.log(invertArr);
      difference.push(invertArr[i] - arr[i]);
      console.log(difference);
    }
  } console.log(difference);

  return 1;
}

sumAll([1, 4]);
////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\2nd Experiment:
function sumAll(arr) {
  console.log(arr);
  const arrClone = [...arr];
  
  const lastItem = arrClone.pop();
 
  const invertArr = [];
  arr.forEach(elementValue => {
    
    if (elementValue > lastItem) {
      invertArr.push(lastItem);
      invertArr.push(arrClone.shift());
      return invertArr;
    }
  });
  console.log(invertArr);
  let difference = [];
  arr.filter(elementValue => {
    let largerValue = [];
    let lowerValue = [];
    
    if (elementValue < lastItem) {
      //console.log(elementValue);
      lowerValue.push(elementValue);
      difference = lastItem - lowerValue;
      return difference;
    } else if (elementValue > lastItem) {
      //console.log(elementValue);
      largerValue.push(elementValue);
      difference = largerValue - lastItem;
      return difference;
    }
  }, 0);
  console.log(difference)
  const newArr = [];
  
  return 1;
}

sumAll([1, 4]);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////3rd Experiment
function sumAll(arr) {
  console.log(arr);
  const arrClone = [...arr];

  const firstItem = arrClone.slice(0,1);
  console.log(firstItem);
  const lastItem = arrClone.slice(1);
  //console.log(lastItem);
  const invertArr = [];
  arr.forEach(elementValue => {
    
    if (elementValue > lastItem) {
      invertArr.push(lastItem);
      invertArr.push(arrClone.shift());
      return invertArr;
    }
  });
  console.log(invertArr);

  let difference = [];
  arr.filter(elementValue => {
    let largerValue = [];
    let lowerValue = [];
    
    if (elementValue < lastItem) {
      //console.log(elementValue);
      lowerValue.push(elementValue);
      difference = lastItem - lowerValue;
      return difference;
    } else if (elementValue > lastItem) {
      //console.log(elementValue);
      largerValue.push(elementValue);
      difference = largerValue - lastItem;
      return difference;
    }
  }, 0);
  console.log(difference)
  let allNums = [];
  arr.map(elementValue => {
    if (difference > firstItem) {
      let firstItemArr = firstItem.slice();
      //console.log(lastItem.valueOf());
      for (let i = firstItemArr.valueOf(); i < lastItem.valueOf(); i++) {
        //console.log(i);
        allNums.push(i);
      };
    } else if (difference <= firstItem) {
        let firstItemArr = firstItem.slice();
        let lastItemArr = lastItem.slice();
        //console.log(lastItem.valueOf());
        for (let i = lastItemArr.valueOf(); i < firstItemArr.valueOf(); i++) {
        //console.log(i);
        allNums.push(i);
      };
    }
  });
  console.log(allNums)
  const newArr = [];
  
  return 1;
}

sumAll([1, 4]);
////////////////////////////////////////////
\\\\\\\\\\\\\\\\\4th Variation:
function sumAll(arr) {
  console.log(arr);
//Making a copy of the array to avoid mutations
  const arrClone = [...arr];
//Checking the order of elements and sorting them in a new array
  const arrangedArrClone = arrClone.sort(function(a,b){return a - b});
  console.log(arrangedArrClone);
//Extracting the first and last elements 
  const firstItem = arrangedArrClone.slice(0,1);
  console.log(firstItem);
  const lastItem = arrangedArrClone.slice(1);
  console.log(lastItem);
//Finding the difference between the two elements
  let difference = [];
  arrangedArrClone.filter(elementValue => {
    let largerValue = [];
    let lowerValue = [];
    if (elementValue < lastItem) {
      //console.log(elementValue);
      lowerValue.push(elementValue);
      difference = lastItem - lowerValue;
      return difference;
    } else if (elementValue > lastItem) {
      //console.log(elementValue);//This check is leftover and should have no effect on the code should it be removed, 
      //since the arrangedArrClone is present
      largerValue.push(elementValue);
      difference = largerValue - lastItem;
      return difference;
    }
  }, 0);
  console.log(difference)
//Finding the missing values between the given elements
  let missingNumsArr = [];
  
  console.log(missingNumsArr);
  const newArr = [];  
  return 1;
}

sumAll([10, 5]);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////5th Variation
function sumAll(arr) {
  console.log(arr);
//Making a copy of the array to avoid mutations
  const arrClone = [...arr];
//Checking the order of elements and sorting them in a new array
  const arrangedArrClone = arrClone.sort(function(a,b){return a - b});
  console.log(arrangedArrClone);
//Extracting the first and last elements 
  const firstItem = arrangedArrClone.slice(0,1);
  console.log(firstItem);
  const lastItem = arrangedArrClone.slice(1);
  console.log(lastItem);
//Setting variable to store missing data
  let missingNumsArr = [];
//Finding the difference between the two elements
  let difference = [];
  arrangedArrClone.filter(elementValue => {
    let largerValue = [];
    let lowerValue = [];
    if (elementValue < lastItem) {
      //console.log(elementValue);
      lowerValue.push(elementValue);
      difference = lastItem - lowerValue;
      return difference;
    } else if (elementValue > lastItem) {
      //console.log(elementValue);//This check is leftover and should have no effect on the code should it be removed, 
      //since the arrangedArrClone is present
      largerValue.push(elementValue);
      difference = largerValue - lastItem;
      return difference;
    }
  }, 0);
  console.log(difference);
//Adding missing data value of last item to be added 
  if (difference != firstItem){
  missingNumsArr.push(difference);
  };
  //console.log(missingNumsArr);
//Finding the missing values between the given elements
  
  arrangedArrClone.map(elementValue => {
    if (elementValue < difference) {
      return missingNumsArr.unshift(difference - elementValue);  
    } if (elementValue === difference) {
      console.log(missingNumsArr.push(difference + 1));   
    }; 
  });
  
  console.log(missingNumsArr);
  const newArr = [];  
  return 1;
}

sumAll([1, 4]);
///////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\6th Variation:
function sumAll(arr) {
  console.log(arr);
//Making a copy of the array to avoid mutations
  const arrClone = [...arr];
//Checking the order of elements and sorting them in a new array
  const arrangedArrClone = arrClone.sort(function(a,b){return a - b});
  console.log(arrangedArrClone);
//Extracting the first and last elements 
  const firstItem = arrangedArrClone.slice(0,1);
  console.log(firstItem);
  const lastItem = arrangedArrClone.slice(1);
  console.log(lastItem);
//Setting variable to store missing data
  let missingNumsArr = [];
//Finding the difference between the two elements
  let difference = [];
  arrangedArrClone.filter(elementValue => {
    let largerValue = [];
    let lowerValue = [];
    if (elementValue < lastItem) {
      //console.log(elementValue);
      lowerValue.push(elementValue);
      difference = lastItem - lowerValue;
      return difference;
    } else if (elementValue > lastItem) {
      //console.log(elementValue);//This check is leftover and should have no effect on the code should it be removed, since the arrangedArrClone is present
      largerValue.push(elementValue);
      difference = largerValue - lastItem;
      return difference;
    }
  }, 0);
  console.log(difference);
//Adding missing data value of last item to be added 
  if (difference != firstItem){
  missingNumsArr.push(difference);
  };
  //console.log(missingNumsArr);
//Finding the missing values between the given elements
  
  arrangedArrClone.map(elementValue => {
    if (elementValue < difference) {
      return missingNumsArr.unshift(difference - elementValue);  
    } if (elementValue === difference) {
      console.log(missingNumsArr.push(difference + 1));   
    }; 
  });
  
  console.log(missingNumsArr);
  let newArr = [];
  if (firstItem === 1) {
    newArr = lastItem * (lastItem + firstItem) / 2 ;
    return newArr;  
  };
  if (firstItem > 1) {
    newArr = (lastItem * (lastItem + 1) / 2) - (firstItem * (firstItem - 1) / 2)
  };
  console.log(newArr);
   
  return 1;
}

sumAll([10, 5]);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////////////////////THE SOLUTION CODE:
function sumAll(arr) {
  console.log(arr);
//Making a copy of the array to avoid mutations
  const arrClone = [...arr];
//Checking the order of elements and sorting them in a new array
  const arrangedArrClone = arrClone.sort(function(a,b){return a - b});
  console.log(arrangedArrClone[1]);
//
  const newArr = [];
  let sumOfAll = arrangedArrClone.filter(elementValue => {
      //console.log(elementValue)
      if (elementValue === 1) {
        sumOfAll = (arrangedArrClone[1] * (elementValue+ arrangedArrClone[1])) / 2;
        console.log(sumOfAll);
        newArr.push(sumOfAll);
        return newArr;
      } else if (elementValue > 1) {
        sumOfAll = ((arrangedArrClone[1] * (1 + arrangedArrClone[1])) / 2) - ((arrangedArrClone[0] * (arrangedArrClone[0] - 1)) / 2);
        console.log(sumOfAll);
        newArr.push(sumOfAll);
        return newArr;
      }    
  });
  let result = newArr.pop()
  console.log(newArr.valueOf());
  return result;

};

sumAll([1, 4]);
/////////////////////////////////////////////////////////


//OUTPUT:
////////////////1st output
[ 1, 4 ]
[ 1, 4 ]
[ 4 ]
[ 3 ]
[ 3 ]
/////////[5,10] input
[ 5, 10 ]
[ 10, 5 ]
[ 5 ]
[ -5 ]
[ -5 ]
/////////////////
\\\\\\\\\\2nd output
[ 1, 4 ]
[]
3
\\\\\\\\\\\\\[10, 5] input
[ 10, 5 ]
[ 5, 10 ]
5
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////3rd output
[ 1, 4 ]
[ 1 ]
[]
3
[ [ 1 ], 2, 3, [ 1 ], 2, 3 ]
///////////////////////////////
\\\\\\\\\\\\\\\\\4th output
[ 10, 5 ]
[ 5, 10 ]
[ 5 ]
[ 10 ]
5
[]
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////5th output
[ 1, 4 ]
[ 1, 4 ]
[ 1 ]
[ 4 ]
3
[ 2, 3 ]
////////////////input [10, 5]
[ 10, 5 ]
[ 5, 10 ]
[ 5 ]
[ 10 ]
5
1
[ 6 ]
///////////////////////////////////
\\\\\\\\\\\\\\\\\\\\6th output:
[ 10, 5 ]
[ 5, 10 ]
[ 5 ]
[ 10 ]
5
1
[ 6 ]
495
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////THE SOLUTION OUTPPUT:
[10]
[45]
////////////////////////////////////////////////////////

//Diff Two Arrays
//Compare two arrays and return a new array with any items only found in one of the two given arrays, 
//    but not both. 
//In other words, return the "symmetric difference" of the two arrays.

//Note: You can return the array with its elements in any order.


//UNCHANGED CODE:

//    function diffArray(arr1, arr2) {
//      const newArr = [];
//      return newArr;
//    }

//    diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

//CHANGED CODE:
\\\\\\\\\\\\\\\\\\\\\\\\1st Attempt
function diffArray(arr1, arr2) {
  const newArr = [];
  console.log(arr1);
  console.log(arr2);
//Cloning of arrays
  let cloneArr1 = [...arr1];
  console.log(cloneArr1);
  let cloneArr2 = [...arr2];
  console.log(cloneArr2);
//Creating a length array for both
  let lengthArr = [];
  const arr1Length = arr1.length;
  console.log(arr1Length);
  lengthArr.push(arr1Length);
  const arr2Length = arr2.length;
  console.log(arr2Length);
  lengthArr.push(arr2Length);
  console.log(lengthArr);
//Creating the filter to find which is the longer array
  let longestArr = [];
    if (arr1Length > arr2Length || arr1Length === arr2Length) {
      longestArr = cloneArr1.slice();
      console.log(longestArr)
    } else if (arr1Length < arr2Length) {
      longestArr = cloneArr2.slice();
      console.log(longestArr)
    };
  //console.log(longestArr)

  return newArr;
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////Attempt 2
function diffArray(arr1, arr2) {
  const newArr = [];
  console.log(arr1);
  console.log(arr2);
//Cloning of arrays
  let cloneArr1 = [...arr1];
  console.log(cloneArr1);
  let cloneArr2 = [...arr2];
  console.log(cloneArr2);
//Creating a length array for both
  let lengthArr = [];
  const arr1Length = arr1.length;
  console.log(arr1Length);
  lengthArr.push(arr1Length);
  const arr2Length = arr2.length;
  console.log(arr2Length);
  lengthArr.push(arr2Length);
  console.log(lengthArr);
//Creating the filter to find which is the longer array
  let longestArr = [];
  let shortestArr = [];
  let equalLengthArr1 = [];
  let equalLengthArr2 = [];
    if (arr1Length > arr2Length) {
      longestArr = cloneArr1.slice();
      console.log(longestArr);
      shortestArr = cloneArr2.slice();
      console.log(shortestArr);
    } else if (arr1Length < arr2Length) {
      longestArr = cloneArr2.slice();
      console.log(longestArr);
      shortestArr = cloneArr1.slice();
      console.log(shortestArr);
    } else if (arr1Length === arr2Length) {
      equalLengthArr1 = cloneArr1.slice();
      console.log(equalLengthArr1);
      equalLengthArr2 = cloneArr2.slice();
      console.log(equalLengthArr2);
    };
  //console.log(longestArr);

  return newArr;
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);
//////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\Attempt 3
function diffArray(arr1, arr2) {
  const newArr = [];
  //console.log(arr1);
  //console.log(arr2);
//Cloning of arrays
  let cloneArr1 = [...arr1];
  //console.log(cloneArr1);
  let cloneArr2 = [...arr2];
  //console.log(cloneArr2);
//Creating a length array for both
  let lengthArr = [];
  const arr1Length = arr1.length;
  //console.log(arr1Length);
  lengthArr.push(arr1Length);
  const arr2Length = arr2.length;
  //console.log(arr2Length);
  lengthArr.push(arr2Length);
  //console.log(lengthArr);
//Creating the filter to find which is the longer array
  let longestArr = [];
  let shortestArr = [];
  let equalLengthArr1 = [];
  let equalLengthArr2 = [];
    if (arr1Length > arr2Length) {
      longestArr = cloneArr1.slice();
      //console.log(longestArr);
      shortestArr = cloneArr2.slice();
      //console.log(shortestArr);
    } else if (arr1Length < arr2Length) {
      longestArr = cloneArr2.slice();
      //console.log(longestArr);
      shortestArr = cloneArr1.slice();
      //console.log(shortestArr);
    } else if (arr1Length === arr2Length) {
      equalLengthArr1 = cloneArr1.slice();
      //console.log(equalLengthArr1);
      equalLengthArr2 = cloneArr2.slice();
      //console.log(equalLengthArr2);
    };
  console.log(longestArr);
//Setting symmetrical difference arrays
  let preSymDifArr1 = [];
  let preSymDifArr2 = [];
  if (cloneArr1 === longestArr) {
    preSymDifArr1 = longestArr.slice();
    console.log(preSymDifArr1);
    preSymDifArr2 = shortestArr.slice();
    console.log(preSymDifArr2);
  } else if (cloneArr2 === longestArr) {
    preSymDifArr1 = longestArr.slice();
    console.log(preSymDifArr1);
    preSymDifArr2 = shortestArr.slice();
    console.log(preSymDifArr2);
  } else if (arr1Length === arr2Length) {
    preSymDifArr1 = longestArr.slice();
    console.log(preSymDifArr1);
    preSymDifArr2 = shortestArr.slice();
    console.log(preSymDifArr2);
  };
//Filter out difference
  let symDif = longestArr.filter(elementValue => {
    let shortDif = shortestArr.filter(shortItem => {
      if (elementValue === shortItem) {
        console.log(shortItem);
        console.log(elementValue);
        newArr.push(elementValue);
        
      };  
      return shortDif;
    }); 
    return symDif;
  });console.log(newArr);

  return newArr;
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////1st SOLUTION:
function diffArray(arr1, arr2) {
  const newArr = [];
  //console.log(arr1);
  //console.log(arr2);
//Cloning of arrays
  let cloneArr1 = [...arr1];
  //console.log(cloneArr1);
  let cloneArr2 = [...arr2];
  //console.log(cloneArr2);
//Creating a length array for both
  let lengthArr = [];
  const arr1Length = arr1.length;
  //console.log(arr1Length);
  lengthArr.push(arr1Length);
  const arr2Length = arr2.length;
  //console.log(arr2Length);
  lengthArr.push(arr2Length);
  //console.log(lengthArr);
//Creating the filter to find which is the longer array
  let longestArr = [];
  let shortestArr = [];
  let equalLengthArr1 = [];
  let equalLengthArr2 = [];
    if (arr1Length > arr2Length) {
      longestArr = cloneArr1.slice();
      //console.log(longestArr);
      shortestArr = cloneArr2.slice();
      //console.log(shortestArr);
    } else if (arr1Length < arr2Length) {
      longestArr = cloneArr2.slice();
      //console.log(longestArr);
      shortestArr = cloneArr1.slice();
      //console.log(shortestArr);
    } else if (arr1Length === arr2Length) {
      equalLengthArr1 = cloneArr1.slice();
      //console.log(equalLengthArr1);
      equalLengthArr2 = cloneArr2.slice();
      //console.log(equalLengthArr2);
    };
  console.log(longestArr);
//Setting symmetrical difference arrays
  let preSymDifArr1 = [];
  let preSymDifArr2 = [];
  if (cloneArr1 === longestArr) {
    preSymDifArr1 = longestArr.slice();
    console.log(preSymDifArr1);
    preSymDifArr2 = shortestArr.slice();
    console.log(preSymDifArr2);
  } else if (cloneArr2 === longestArr) {
    preSymDifArr1 = longestArr.slice();
    console.log(preSymDifArr1);
    preSymDifArr2 = shortestArr.slice();
    console.log(preSymDifArr2);
  } else if (arr1Length === arr2Length) {
    preSymDifArr1 = longestArr.slice();
    console.log(preSymDifArr1);
    preSymDifArr2 = shortestArr.slice();
    console.log(preSymDifArr2);
  };
//Filter out difference
  let symDif = longestArr.filter(elementValue => {
    
      if (shortestArr.includes(elementValue) === false ) {
        console.log(shortestArr);
        console.log(elementValue);
        newArr.push(elementValue);
        symDif = newArr;
        return symDif;
    }; 
    
  });console.log(symDif)
  console.log(newArr);

  return newArr;
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);
///////////////////////////////////////////////////////////////


//OUTPUT:
\\\\\\\\\\\\\\\\\\\\\\\\\1st output:
[ 1, 2, 3, 5 ]
[ 1, 2, 3, 4, 5 ]
[ 1, 2, 3, 5 ]
[ 1, 2, 3, 4, 5 ]
4
5
[ 4, 5 ]
[ 1, 2, 3, 4, 5 ]
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////2nd output:
[ 1, 2, 3, 5 ]
[ 1, 2, 3, 4, 5 ]
[ 1, 2, 3, 5 ]
[ 1, 2, 3, 4, 5 ]
4
5
[ 4, 5 ]
[ 1, 2, 3, 4, 5 ]
[ 1, 2, 3, 5 ]
///////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\3rd output:
[ 1, 2, 3, 4, 5 ]
1
1
2
2
3
3
5
5
[ 1, 2, 3, 5 ]
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////1st SOLUTION OUTPUT:
[ 1, 2, 3, 4, 5 ]
[ 1, 2, 3, 5 ]
4
[ 4 ]
[ 4 ]
///////////////////////////////////////////////////////


//


//UNCHANGED CODE:



//CHANGED CODE:



//OUTPUT:


//


//UNCHANGED CODE:



//CHANGED CODE:



//OUTPUT:



