//Now that you know the basics of algorithmic thinking, along with OOP and Functional Programming, 
//    test your skills with the Intermediate Algorithm Scripting challenges.

//Sum All Numbers in a Range
//We'll pass you an array of two numbers. 
//Return the sum of those two numbers plus the sum of all the numbers between them. 
//The lowest number will not always come first.

//For example, 'sumAll([4,1])' should return '10' because sum of all the numbers between 1 and 4 (both inclusive) is '10'.


//UNCHANGED CODE:

//    function sumAll(arr) {
//      return 1;
//    }

//    sumAll([1, 4]);

//CHANGED CODE:
///////////////////1st Experiment
function sumAll(arr) {
  console.log(arr);
  let newArr = arr.slice().sort();
  console.log(newArr);
  let difference = [];
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] > newArr[i]) {
      difference.push(arr[i] - newArr[i]);
      console.log(difference);
    } else if(arr[i] = newArr[i]) {
      let invertArr = [];
      invertArr.push(newArr.pop());
      console.log(invertArr);
      difference.push(invertArr[i] - arr[i]);
      console.log(difference);
    }
  } console.log(difference);

  return 1;
}

sumAll([1, 4]);
////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\2nd Experiment:
function sumAll(arr) {
  console.log(arr);
  const arrClone = [...arr];
  
  const lastItem = arrClone.pop();
 
  const invertArr = [];
  arr.forEach(elementValue => {
    
    if (elementValue > lastItem) {
      invertArr.push(lastItem);
      invertArr.push(arrClone.shift());
      return invertArr;
    }
  });
  console.log(invertArr);
  let difference = [];
  arr.filter(elementValue => {
    let largerValue = [];
    let lowerValue = [];
    
    if (elementValue < lastItem) {
      //console.log(elementValue);
      lowerValue.push(elementValue);
      difference = lastItem - lowerValue;
      return difference;
    } else if (elementValue > lastItem) {
      //console.log(elementValue);
      largerValue.push(elementValue);
      difference = largerValue - lastItem;
      return difference;
    }
  }, 0);
  console.log(difference)
  const newArr = [];
  
  return 1;
}

sumAll([1, 4]);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////3rd Experiment
function sumAll(arr) {
  console.log(arr);
  const arrClone = [...arr];

  const firstItem = arrClone.slice(0,1);
  console.log(firstItem);
  const lastItem = arrClone.slice(1);
  //console.log(lastItem);
  const invertArr = [];
  arr.forEach(elementValue => {
    
    if (elementValue > lastItem) {
      invertArr.push(lastItem);
      invertArr.push(arrClone.shift());
      return invertArr;
    }
  });
  console.log(invertArr);

  let difference = [];
  arr.filter(elementValue => {
    let largerValue = [];
    let lowerValue = [];
    
    if (elementValue < lastItem) {
      //console.log(elementValue);
      lowerValue.push(elementValue);
      difference = lastItem - lowerValue;
      return difference;
    } else if (elementValue > lastItem) {
      //console.log(elementValue);
      largerValue.push(elementValue);
      difference = largerValue - lastItem;
      return difference;
    }
  }, 0);
  console.log(difference)
  let allNums = [];
  arr.map(elementValue => {
    if (difference > firstItem) {
      let firstItemArr = firstItem.slice();
      //console.log(lastItem.valueOf());
      for (let i = firstItemArr.valueOf(); i < lastItem.valueOf(); i++) {
        //console.log(i);
        allNums.push(i);
      };
    } else if (difference <= firstItem) {
        let firstItemArr = firstItem.slice();
        let lastItemArr = lastItem.slice();
        //console.log(lastItem.valueOf());
        for (let i = lastItemArr.valueOf(); i < firstItemArr.valueOf(); i++) {
        //console.log(i);
        allNums.push(i);
      };
    }
  });
  console.log(allNums)
  const newArr = [];
  
  return 1;
}

sumAll([1, 4]);
////////////////////////////////////////////

//OUTPUT:
////////////////1st output
[ 1, 4 ]
[ 1, 4 ]
[ 4 ]
[ 3 ]
[ 3 ]
/////////[5,10] input
[ 5, 10 ]
[ 10, 5 ]
[ 5 ]
[ -5 ]
[ -5 ]
/////////////////
\\\\\\\\\\2nd output
[ 1, 4 ]
[]
3
\\\\\\\\\\\\\[10, 5] input
[ 10, 5 ]
[ 5, 10 ]
5
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////3rd output
[ 1, 4 ]
[ 1 ]
[]
3
[ [ 1 ], 2, 3, [ 1 ], 2, 3 ]

//


//UNCHANGED CODE:



//CHANGED CODE:



//OUTPUT:


//


//UNCHANGED CODE:



//CHANGED CODE:



//OUTPUT:


//


//UNCHANGED CODE:



//CHANGED CODE:



//OUTPUT:



