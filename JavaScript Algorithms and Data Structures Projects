//This is it — time to put your new JavaScript skills to work. 
//These projects are similar to the algorithm scripting challenges you've done before – just much more difficult.

//Complete these 5 JavaScript projects to earn the JavaScript Algorithms and Data Structures certification.

//Palindrome Checker
//Return 'true' if the given string is a palindrome. Otherwise, return 'false'.

//A "palindrome" is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing.

//Note: You'll need to remove "all non-alphanumeric characters" (punctuation, spaces and symbols) and 
//    turn everything into the same case (lower or upper case) in order to check for palindromes.

//We'll pass strings with varying formats, such as 'racecar', 'RaceCar', and 'race CAR' among others.

//We'll also pass strings with special symbols, such as '2A3*3a2', '2A3 3a2', and '2_A3*3#A2'.


//UNCHANGED CODE:

//    function palindrome(str) {
//      return true;
//    }

//    palindrome("eye");

//CHANGED CODE:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\First Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  console.log(strClone.match(/([\w])/g))
  return true;
}

let result = palindrome("0_0 (: /-\ :) 0-0");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////Second Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  //console.log(strClone.match(/([\w])/g));
  let individualCharacters = strClone.match(/([\w])/g);
  console.log(individualCharacters);
  return true;
}

let result = palindrome("five|\_/|four");
console.log(result);
//////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\Third Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  //console.log(strClone.match(/([\w])/g));
  let individualCharacters = strClone.match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        console.log(typeof (individualCharacters[i]));
        if (Object.keys(individualCharacters[i])){} 
    };
    //console.log((individualCharacters[i]).indexOf());
    
  }console.log(typeof (Object.values(individualCharacters[0])))
  ;
  return true;
}

let result = palindrome("five|\_/|four");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////Forth Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  //console.log(strClone.match(/([\w])/g));
  let individualCharacters = strClone.match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === individualCharacters[4]) {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          console.log(afterI);
          individualCharacters.splice(i, i, afterI) 
        }
    };
    //console.log((individualCharacters[i]).indexOf());
    
  };
  console.log((individualCharacters));
  return true;
}

let result = palindrome("five|\_/|four");
console.log(result);
////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Fifth Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  //console.log(strClone.match(/([\w])/g));
  let individualCharacters = strClone.match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === individualCharacters[4]) {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          console.log(afterI[0]);
          individualCharacters.pop();
          for (let j = 0; j < afterI.length; j++) {
            individualCharacters.push(afterI[j]);
          };
        };
    };
    //console.log((individualCharacters[i]).indexOf());
    
  };
  console.log((individualCharacters));
  return true;
}

let result = palindrome("five|\_/|four");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////////Sixth Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  //console.log(strClone.match(/([\w])/g));
  let individualCharacters = strClone.toLowerCase().match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === "") {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          console.log(afterI[0]);
          individualCharacters.pop();
          for (let j = 0; j < afterI.length; j++) {
            individualCharacters.push(afterI[j]);
          };
        };
    };
    //console.log((individualCharacters[i]).indexOf());
    
  };
  console.log((individualCharacters));
  return true;
}

let result = palindrome("five|\_/|four");
console.log(result);
///////////////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Seventh Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  let individualCharacters = individualCharacterHandler(strClone);
  
  console.log(individualCharacters);
  return true;
};
let result = palindrome("five|\_/|four");
console.log(result);

function individualCharacterHandler(targetStr) {
  let individualCharacters = targetStr.toLowerCase().match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        //console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === "") {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          //console.log(afterI[0]);
          individualCharacters.pop();
          for (let j = 0; j < afterI.length; j++) {
            individualCharacters.push(afterI[j]);
        };
      };
    };
  };
  return individualCharacters;
};
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////////////////Eighth Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  let individualCharacters = individualCharacterHandler(strClone);
  
  console.log(individualCharacters);
  let reverseCharacters = individualCharacters.reverse();
  console.log(reverseCharacters);

  return true;
};
let result = palindrome("five|\_/|four");
console.log(result);

function individualCharacterHandler(targetStr) {
  let individualCharacters = targetStr.toLowerCase().match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        //console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === "") {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          //console.log(afterI[0]);
          individualCharacters.pop();
          for (let j = 0; j < afterI.length; j++) {
            individualCharacters.push(afterI[j]);
        };
      };
    };
  };
  return individualCharacters;
};
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////THE SOLUTION CODE
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  let individualCharacters = individualCharacterHandler(strClone);
  let indCharClone = individualCharacters.slice();
  
  //console.log(reversal(individualCharacters));
  let reverseCharacters = reversal(indCharClone);
  for (let i = 0; i < individualCharacters.length; i++) {
    //console.log(individualCharacters[i], reverseCharacters[i])
    if (individualCharacters[i] !== reverseCharacters[i]) { 
      return false;
    };
  };
  console.log(reverseCharacters);

  return true;
};
let result = palindrome("five|\_/|four");
console.log(result);

function individualCharacterHandler(targetStr) {
  let individualCharacters = targetStr.toLowerCase().match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        //console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === "") {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          //console.log(afterI[0]);
          individualCharacters.pop();
          for (let j = 0; j < afterI.length; j++) {
            individualCharacters.push(afterI[j]);
        };
      };
    };
  };
  return individualCharacters;
};

function reversal(targetArr) {
  let reverseCharacters = targetArr.reverse();
  return reverseCharacters;
};
///////////////////////////////////////////////////////////////////////////////////

//OUTPUT:
\\\\\\\\\\\\\\\\\\\\\\\\\\First Analysis Output
0_0 (: /- :) 0-0
[ '0', '_', '0', '0', '0' ]
true
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////Second Analysis Ouyput
five|_/|four
[ 'f', 'i', 'v', 'e', '_', 'f', 'o', 'u', 'r' ]
true
//////////////////////////////////////////////////////////////

//Roman Numeral Converter
//Convert the given number into a roman numeral.

//Roman numerals	Arabic numerals
//      M	              1000
//      CM	            900
//      D	              500
//      CD	            400
//      C	              100
//      XC	            90
//      L	              50
//      XL	            40
//      X	              10
//      IX	            9
//      V	              5
//      IV	            4
//      I	              1
//All roman numerals answers should be provided in upper-case


//UNCHANGED CODE:

//    function convertToRoman(num) {
//     return num;
//    }

//    convertToRoman(36);

//CHANGED CODE:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\First Analysis
function convertToRoman(num) {
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  console.log(Object.values(romanNumerals))
 return num;
}

let result = convertToRoman(36);
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////////////////Second Analysis
function convertToRoman(num) {
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let preRomanNumeral = [];
  for (let i = 1; i <= num; i++) { 
    if (i === 1) {
      preRomanNumeral.push(romanNumerals[0]);
      } else if (i === 2) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0]);
      } else if (i === 3) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0] + romanNumerals[0]);
      }
      
  }
  console.log(preRomanNumeral);
  console.log(Object.values(romanNumerals))
 return num;
}

let result = convertToRoman(3);
console.log(result);
/////////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Third Analysis
function convertToRoman(num) {
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let preRomanNumeral = [];
  for (let i = 1; i <= num; i++) { 
    if (i === 1) {
      preRomanNumeral.push(romanNumerals[0]);
      } else if (i === 2) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0]);
      } else if (i === 3) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 4) {
      preRomanNumeral.push(romanNumerals[1]);
      } else if (i === 5) {
      preRomanNumeral.push(romanNumerals[2]);
      } else if (i === 6) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0]);
      } else if (i === 7) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 8) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 9) {
      preRomanNumeral.push(romanNumerals[3]);
      }    
  }
  console.log(preRomanNumeral);
  console.log(Object.values(romanNumerals))
 return num;
}

let result = convertToRoman(10);
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////Forth Analysis
function convertToRoman(num) {
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let returnedRomanNumeral = [];
  if (num < 10) {
  romanOnes(num, romanNumerals);
  };
  /*let preRomanNumeral = [];
  for (let i = 1; i <= num; i++) { 
    if (i === 1) {
      preRomanNumeral.push(romanNumerals[0]);
      } else if (i === 2) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0]);
      } else if (i === 3) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 4) {
      preRomanNumeral.push(romanNumerals[1]);
      } else if (i === 5) {
      preRomanNumeral.push(romanNumerals[2]);
      } else if (i === 6) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0]);
      } else if (i === 7) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 8) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 9) {
      preRomanNumeral.push(romanNumerals[3]);
      }    
  };*/ 
  console.log(romanOnes(num, romanNumerals));
  console.log(Object.values(romanNumerals))
 return num;
}

let result = convertToRoman(10);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
  };
  console.log(preRomanNumeral);
  return preRomanNumeral;
};
//////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Fifth Analysis
function convertToRoman(num) {
  let numClone = num.toString();
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let romanNumeralsOnes = [];
  let romanNumeralsTens = [];
  let romanNumeralsHundreds = [];
  let romanNumeralsThousands = [];
  for (let i = 0; i < romanNumerals.length; i++) {
    if (i < 4) {
      romanNumeralsOnes.push(romanNumerals[i]);
    } else if (i < 8) {
      romanNumeralsTens.push(romanNumerals[i]);
    } else if (i < 12) {
      romanNumeralsHundreds.push(romanNumerals[i]);
    } else if (i === 12) {
      romanNumeralsThousands.push(romanNumerals[i]);
    }; 
  };
  console.log(romanNumeralsThousands)
  let returnedRomanNumeral = [];
  if (numClone[1] === undefined) {
        romanOnes(num, romanNumerals);
  } else if (numClone[0] != "0") {
        romanOnes(num, romanNumerals);
  }
  /*for (let i = 1; i < num; i++) {
    let counterOne = 1;
    while (counterOne <= 9) {
       else if (num < 100) {
        romanTens(num, romanNumerals);
      }
      counterOne +=1;
    };
    
  };*/
  let numSplit = [];
  console.log(numSplit = numClone.split(""))
  console.log(romanOnes(num, romanNumerals));
  console.log(Object.values(romanNumerals))
 return num;
}

let result = convertToRoman(9);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  let counter = 1;
  if (numValue < 10) {
    for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
    };
  } else if (numValue < 100) {
    romanTens(numValue, roman, preRomanNumeral);
  }
  console.log(preRomanNumeral);
  return preRomanNumeral;
};

function romanTens(numValue, roman, romanOne) {
  let preRomanNumeral = []; 
    if (numValue === 10) {
      preRomanNumeral.push(roman[4]);
    } else if (numValue > 10 && numValue < 20){ 
        for (let counterTen = 0;counterTen <= 8; counterTen +=1) {
          preRomanNumeral.push(roman[4] + romanOne[counterTen]);
          preRomanNumeral.shift();
        }; 
    };  
    if (numValue === 20) {
      preRomanNumeral.push(roman[4] + roman[4]);
      preRomanNumeral.shift();
    } else if (numValue > 20 && numValue < 30) {
      for (let counterTwenty = 0;counterTen <= 8; counterTwenty +=1) {
        preRomanNumeral.push(roman[4] + roman[4] + roman[counterTwenty]);
        preRomanNumeral.shift();
      };
    }; 
    if (numValue === 30) {
      preRomanNumeral.push(roman[4] + roman[4] + roman[4]);
      preRomanNumeral.shift();
    } else if (numValue > 30 && numValue < 40) {
      for (let counterThirty = 0;counterTen <= 8; counterThirty +=1) {
        preRomanNumeral.push(roman[4] + roman[4] + roman[4] + roman[counterThirty]);
        preRomanNumeral.shift();
      };
     }; 
     if (numValue === 50) {
       preRomanNumeral.push(roman[5]);
       preRomanNumeral.shift();
     } else if (numValue > 50 && numValue < 60) {
      preRomanNumeral.push(roman[5] + roman[numValue]);
      preRomanNumeral.shift();
     };
     if (numValue < 60) {
      preRomanNumeral.push(roman[6] + roman[numValue]);
      preRomanNumeral.shift();
      } else if (numValue < 70) {
      preRomanNumeral.push(roman[6] + roman[4] + roman[numValue]);
      preRomanNumeral.shift();
      } else if (numValue < 80) {
      preRomanNumeral.push(roman[6] + roman[4] + roman[4] + roman[numValue]);
      preRomanNumeral.shift();
      } else if (numValue < 90) {
      preRomanNumeral.push(roman[6] + roman[4] + roman[4] + roman[4] + roman[numValue]);
      preRomanNumeral.shift();
      } else if (numValue < 100) {
      preRomanNumeral.push(roman[7]);
      preRomanNumeral.shift();
      };    
  
  console.log(preRomanNumeral);
  return preRomanNumeral;
};
/*let preRomanNumeral = [];
  for (let i = 10; i <= num; i++) { 
    if (i === 10) {
      preRomanNumeral.push(romanNumerals[4]);
      } else if (i === 20) {
      preRomanNumeral.push(romanNumerals[4] + romanNumerals[4]);
      } else if (i === 30) {
      preRomanNumeral.push(romanNumerals[4] + romanNumerals[4] + romanNumerals[4]);
      } else if (i === 40) {
      preRomanNumeral.push(romanNumerals[5]);
      } else if (i === 50) {
      preRomanNumeral.push(romanNumerals[6]);
      } else if (i === 60) {
      preRomanNumeral.push(romanNumerals[6] + romanNumerals[4]);
      } else if (i === 70) {
      preRomanNumeral.push(romanNumerals[6] + romanNumerals[4] + romanNumerals[4]);
      } else if (i === 80) {
      preRomanNumeral.push(romanNumerals[6] + romanNumerals[4] + romanNumerals[4] + romanNumerals[4]);
      } else if (i === 90) {
      preRomanNumeral.push(romanNumerals[7]);
      }    
  };
  let counterTen = 10;
    while (counterTen <= 90) {
      
      counterTen += 10;
    }*/ 
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////Sixth Analysis
function convertToRoman(num) {
 let numClone = num.toString();
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let romanNumeralsOnes = [];
  let romanNumeralsTens = [];
  let romanNumeralsHundreds = [];
  let romanNumeralsThousands = [];
  for (let i = 0; i < romanNumerals.length; i++) {
    if (i < 4) {
      romanNumeralsOnes.push(romanNumerals[i]);
    } else if (i < 8) {
      romanNumeralsTens.push(romanNumerals[i]);
    } else if (i < 12) {
      romanNumeralsHundreds.push(romanNumerals[i]);
    } else if (i === 12) {
      romanNumeralsThousands.push(romanNumerals[i]);
    }; 
  };
  let numSplit = [];
  console.log(numSplit = numClone.split(""));
  console.log(Number(numSplit[0]))
  let returnedRomanNumeralOnes = [];
  let returnedRomanNumeralTens = [];
  let returnedRomanNumeralHundreds = [];
  let returnedRomanNumeralThousands = [];
  if (numSplit.length === 1) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[0]), romanNumeralsOnes));
  } else if (numSplit.length === 2) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[0]), romanNumeralsTens));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[1]), romanNumeralsOnes));
  }
    
  }
  console.log(returnedRomanNumeralTens);
  console.log(returnedRomanNumeralOnes);
  console.log(returnedRomanNumeralTens + returnedRomanNumeralOnes);
 return num;
}

let result = convertToRoman(99);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  //let counter = 1;
  if (numValue < 10) {
    for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
    };
  }; 
  //console.log(preRomanNumeral);
  return preRomanNumeral;
};
//////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Seventh Analysis
function convertToRoman(num) {
 let numClone = num.toString();
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let romanNumeralsOnes = [];
  let romanNumeralsTens = [];
  let romanNumeralsHundreds = [];
  let romanNumeralsThousands = [];
  for (let i = 0; i < romanNumerals.length; i++) {
    if (i < 4) {
      romanNumeralsOnes.push(romanNumerals[i]);
    } else if (i < 8) {
      romanNumeralsTens.push(romanNumerals[i]);
    } else if (i < 12) {
      romanNumeralsHundreds.push(romanNumerals[i]);
    } else if (i === 12) {
      romanNumeralsThousands.push(romanNumerals[i]);
    }; 
  };
  let numSplit = [];
  console.log(numSplit = numClone.split(""));
  console.log(Number(numSplit[0]))
  let returnedRomanNumeralOnes = [];
  let returnedRomanNumeralTens = [];
  let returnedRomanNumeralHundreds = [];
  let returnedRomanNumeralThousands = [];
  if (numSplit.length === 1) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[0]), romanNumeralsOnes));
        return returnedRomanNumeralOnes.toString();
  } else if (numSplit.length === 2) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[0]), romanNumeralsTens));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[1]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralTens + returnedRomanNumeralOnes);
  };
  console.log(returnedRomanNumeralTens);
  console.log(returnedRomanNumeralOnes);
  console.log(returnedRomanNumeralTens + returnedRomanNumeralOnes);
 return num;
}

let result = convertToRoman(91);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  //let counter = 1;
  if (numValue < 10) {
    for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
    };
  }; 
  //console.log(preRomanNumeral);
  return preRomanNumeral;
};
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////Eighth Analysis
function convertToRoman(num) {
 let numClone = num.toString();
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let romanNumeralsOnes = [];
  let romanNumeralsTens = [];
  let romanNumeralsHundreds = [];
  let romanNumeralsThousands = [];
  for (let i = 0; i < romanNumerals.length; i++) {
    if (i < 4) {
      romanNumeralsOnes.push(romanNumerals[i]);
    } else if (i < 8) {
      romanNumeralsTens.push(romanNumerals[i]);
    } else if (i < 12) {
      romanNumeralsHundreds.push(romanNumerals[i]);
    } else if (i === 12) {
      romanNumeralsThousands.push(romanNumerals[i]);
    }; 
  };
  let numSplit = [];
  console.log(numSplit = numClone.split(""));
  console.log(Number(numSplit[0]))
  let returnedRomanNumeralOnes = [];
  let returnedRomanNumeralTens = [];
  let returnedRomanNumeralHundreds = [];
  let returnedRomanNumeralThousands = [];
  if (numSplit.length === 1) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[0]), romanNumeralsOnes));
        return returnedRomanNumeralOnes.toString();
  } else if (numSplit.length === 2) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[0]), romanNumeralsTens));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[1]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralTens + returnedRomanNumeralOnes);
  } else if (numSplit.length === 3) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsHundreds);
        returnedRomanNumeralHundreds = (romanOnes(Number(numSplit[0]), romanNumeralsHundreds));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(numSplit, romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[1]), romanNumeralsTens));
      };
      if (Number(numSplit[2]) < 10) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[2]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralHundreds + returnedRomanNumeralTens + returnedRomanNumeralOnes);
  };
  console.log(returnedRomanNumeralTens);
  console.log(returnedRomanNumeralOnes);
  console.log(returnedRomanNumeralTens + returnedRomanNumeralOnes);
 return num;
}

let result = convertToRoman(999);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  //let counter = 1;
  if (numValue < 10) {
    for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
    };
  }; 
  //console.log(preRomanNumeral);
  return preRomanNumeral;
};
///////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\THE SOLUTION CODE
function convertToRoman(num) {
 let numClone = num.toString();
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let romanNumeralsOnes = [];
  let romanNumeralsTens = [];
  let romanNumeralsHundreds = [];
  let romanNumeralsThousands = [];
  for (let i = 0; i < romanNumerals.length; i++) {
    if (i < 4) {
      romanNumeralsOnes.push(romanNumerals[i]);
    } else if (i < 8) {
      romanNumeralsTens.push(romanNumerals[i]);
    } else if (i < 12) {
      romanNumeralsHundreds.push(romanNumerals[i]);
    } else if (i === 12) {
      romanNumeralsThousands.push(romanNumerals[i]);
    }; 
  };
  let numSplit = [];
  console.log(numSplit = numClone.split(""));
  console.log(Number(numSplit[0]))
  let returnedRomanNumeralOnes = [];
  let returnedRomanNumeralTens = [];
  let returnedRomanNumeralHundreds = [];
  let returnedRomanNumeralThousands = [];
  if (numSplit.length === 1) {
        romanOnes(Number(numSplit[0]), romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[0]), romanNumeralsOnes));
        return returnedRomanNumeralOnes.toString();
  } else if (numSplit.length === 2) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[0]), romanNumeralsTens));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(Number(numSplit[1]), romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[1]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralTens + returnedRomanNumeralOnes);
  } else if (numSplit.length === 3) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsHundreds);
        returnedRomanNumeralHundreds = (romanOnes(Number(numSplit[0]), romanNumeralsHundreds));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(Number(numSplit[1]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[1]), romanNumeralsTens));
      };
      if (Number(numSplit[2]) < 10) {
        romanOnes(Number(numSplit[2]), romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[2]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralHundreds + returnedRomanNumeralTens + returnedRomanNumeralOnes);
  } else if (numSplit.length === 4) {
      if (Number(numSplit[0]) < 10) {
        returnedRomanNumeralThousands = romanOnes(Number(numSplit[0]), romanNumeralsThousands)
      }
      if (Number(numSplit[1]) < 10) {
        romanOnes(Number(numSplit[1]), romanNumeralsHundreds);
        returnedRomanNumeralHundreds = (romanOnes(Number(numSplit[1]), romanNumeralsHundreds));
      };
      if (Number(numSplit[2]) < 10) {
        romanOnes(Number(numSplit[2]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[2]), romanNumeralsTens));
      };
      if (Number(numSplit[3]) < 10) {
        romanOnes(Number(numSplit[3]), romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[3]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralThousands + returnedRomanNumeralHundreds + returnedRomanNumeralTens + returnedRomanNumeralOnes);
  };
  console.log(returnedRomanNumeralTens);
  console.log(returnedRomanNumeralOnes);
  console.log(returnedRomanNumeralTens + returnedRomanNumeralOnes);
 return num;
}

let result = convertToRoman(3999);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  //let counter = 1;
  if (numValue < 10) {
    for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
    };
  }; 
  //console.log(preRomanNumeral);
  return preRomanNumeral;
};
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

//OUTPUT:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Sixth Analysis Output
[ '9', '9' ]
9
[ 'XC' ]
[ 'IX' ]
XCIX
99
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////Seventh Analysis Output
[ '9', '1' ]
9
XCI
//////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Eighth Analysis Output
[ '9', '9', '9' ]
9
CMXCIX
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////////SOLUTION OUTPUT
[ '3', '9', '9', '9' ]
3
MMMCMXCIX
///////////////////////////////////////////////////////

//Caesars Cipher
//One of the simplest and most widely known ciphers is a "Caesar cipher", also known as a "shift cipher". 
//In a shift cipher the meanings of the letters are shifted by some set amount.

//A common modern use is the ROT13 cipher, where the values of the letters are shifted by 13 places. 
//Thus 'A ↔ N', 'B ↔ O' and so on.

//Write a function which takes a ROT13 encoded string as input and returns a decoded string.

//All letters will be uppercase. Do not transform any non-alphabetic character (i.e. spaces, punctuation), but do pass them on.




//UNCHANGED CODE:

//    function rot13(str) {
//      return str;
//    }

//    rot13("SERR PBQR PNZC");

//CHANGED CODE:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\First Analysis
function rot13(str) {
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
  
  let strClone = str.split("");
  console.log(alphabet, strClone);
  return str;
}

let result = rot13("SERR PBQR PNZC");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////Second Analysis
function rot13(str) {
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
  let halfAbet1 = alphabet.slice(0, 13);
  let halfAbet2 = alphabet.slice(13);
  let strClone = str.split(" ");
  let individualStrLetters = strClone[0].split("");
  let individualStrLettersArr = [];
  //console.log(halfAbet1, halfAbet2, strClone);
  for (let i = 0; i < strClone.length; i++) {
    //console.log(strClone[i]);
    if (i === (i + strClone.length) - strClone.length) {
      individualStrLetters = strClone[i].split("");
      individualStrLettersArr.push(individualStrLetters);
    };
  };
  console.log(individualStrLettersArr);

  return str;
}

let result = rot13("SERR PBQR PNZC");
console.log(result);
////////////////////////////////////////////////////////////////////////

//OUTPUT:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Second Analysis
[ [ 'S', 'E', 'R', 'R' ],
  [ 'P', 'B', 'Q', 'R' ],
  [ 'P', 'N', 'Z', 'C' ] ]
SERR PBQR PNZC
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

//


//UNCHANGED CODE:



//CHANGED CODE:



//OUTPUT:

//


//UNCHANGED CODE:



//CHANGED CODE:



//OUTPUT:

