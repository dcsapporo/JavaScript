//This is it — time to put your new JavaScript skills to work. 
//These projects are similar to the algorithm scripting challenges you've done before – just much more difficult.

//Complete these 5 JavaScript projects to earn the JavaScript Algorithms and Data Structures certification.

//Palindrome Checker
//Return 'true' if the given string is a palindrome. Otherwise, return 'false'.

//A "palindrome" is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing.

//Note: You'll need to remove "all non-alphanumeric characters" (punctuation, spaces and symbols) and 
//    turn everything into the same case (lower or upper case) in order to check for palindromes.

//We'll pass strings with varying formats, such as 'racecar', 'RaceCar', and 'race CAR' among others.

//We'll also pass strings with special symbols, such as '2A3*3a2', '2A3 3a2', and '2_A3*3#A2'.


//UNCHANGED CODE:

//    function palindrome(str) {
//      return true;
//    }

//    palindrome("eye");

//CHANGED CODE:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\First Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  console.log(strClone.match(/([\w])/g))
  return true;
}

let result = palindrome("0_0 (: /-\ :) 0-0");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////Second Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  //console.log(strClone.match(/([\w])/g));
  let individualCharacters = strClone.match(/([\w])/g);
  console.log(individualCharacters);
  return true;
}

let result = palindrome("five|\_/|four");
console.log(result);
//////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\Third Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  //console.log(strClone.match(/([\w])/g));
  let individualCharacters = strClone.match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        console.log(typeof (individualCharacters[i]));
        if (Object.keys(individualCharacters[i])){} 
    };
    //console.log((individualCharacters[i]).indexOf());
    
  }console.log(typeof (Object.values(individualCharacters[0])))
  ;
  return true;
}

let result = palindrome("five|\_/|four");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////Forth Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  //console.log(strClone.match(/([\w])/g));
  let individualCharacters = strClone.match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === individualCharacters[4]) {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          console.log(afterI);
          individualCharacters.splice(i, i, afterI) 
        }
    };
    //console.log((individualCharacters[i]).indexOf());
    
  };
  console.log((individualCharacters));
  return true;
}

let result = palindrome("five|\_/|four");
console.log(result);
////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Fifth Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  //console.log(strClone.match(/([\w])/g));
  let individualCharacters = strClone.match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === individualCharacters[4]) {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          console.log(afterI[0]);
          individualCharacters.pop();
          for (let j = 0; j < afterI.length; j++) {
            individualCharacters.push(afterI[j]);
          };
        };
    };
    //console.log((individualCharacters[i]).indexOf());
    
  };
  console.log((individualCharacters));
  return true;
}

let result = palindrome("five|\_/|four");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////////Sixth Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  //console.log(strClone.match(/([\w])/g));
  let individualCharacters = strClone.toLowerCase().match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === "") {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          console.log(afterI[0]);
          individualCharacters.pop();
          for (let j = 0; j < afterI.length; j++) {
            individualCharacters.push(afterI[j]);
          };
        };
    };
    //console.log((individualCharacters[i]).indexOf());
    
  };
  console.log((individualCharacters));
  return true;
}

let result = palindrome("five|\_/|four");
console.log(result);
///////////////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Seventh Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  let individualCharacters = individualCharacterHandler(strClone);
  
  console.log(individualCharacters);
  return true;
};
let result = palindrome("five|\_/|four");
console.log(result);

function individualCharacterHandler(targetStr) {
  let individualCharacters = targetStr.toLowerCase().match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        //console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === "") {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          //console.log(afterI[0]);
          individualCharacters.pop();
          for (let j = 0; j < afterI.length; j++) {
            individualCharacters.push(afterI[j]);
        };
      };
    };
  };
  return individualCharacters;
};
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////////////////Eighth Analysis
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  let individualCharacters = individualCharacterHandler(strClone);
  
  console.log(individualCharacters);
  let reverseCharacters = individualCharacters.reverse();
  console.log(reverseCharacters);

  return true;
};
let result = palindrome("five|\_/|four");
console.log(result);

function individualCharacterHandler(targetStr) {
  let individualCharacters = targetStr.toLowerCase().match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        //console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === "") {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          //console.log(afterI[0]);
          individualCharacters.pop();
          for (let j = 0; j < afterI.length; j++) {
            individualCharacters.push(afterI[j]);
        };
      };
    };
  };
  return individualCharacters;
};
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////THE SOLUTION CODE
function palindrome(str) {
  console.log(str);
  let strClone = str.slice();
  let individualCharacters = individualCharacterHandler(strClone);
  let indCharClone = individualCharacters.slice();
  
  //console.log(reversal(individualCharacters));
  let reverseCharacters = reversal(indCharClone);
  for (let i = 0; i < individualCharacters.length; i++) {
    //console.log(individualCharacters[i], reverseCharacters[i])
    if (individualCharacters[i] !== reverseCharacters[i]) { 
      return false;
    };
  };
  console.log(reverseCharacters);

  return true;
};
let result = palindrome("five|\_/|four");
console.log(result);

function individualCharacterHandler(targetStr) {
  let individualCharacters = targetStr.toLowerCase().match(/([\w])/g);
  for (let i = 0; i < individualCharacters.length; i++) {
    if (individualCharacters[i] === "_") {
      individualCharacters[i] = ""
        //console.log(typeof (individualCharacters[i]));
        if ((individualCharacters[i]) === individualCharacters[0]){
          individualCharacters.shift();
        } else if ((individualCharacters[i]) === individualCharacters[1]) {
          individualCharacters.splice(i,i);
        } else if ((individualCharacters[i]) === "") {
          let afterI = individualCharacters.splice(i+1);
          //afterI.shift();
          //console.log(afterI[0]);
          individualCharacters.pop();
          for (let j = 0; j < afterI.length; j++) {
            individualCharacters.push(afterI[j]);
        };
      };
    };
  };
  return individualCharacters;
};

function reversal(targetArr) {
  let reverseCharacters = targetArr.reverse();
  return reverseCharacters;
};
///////////////////////////////////////////////////////////////////////////////////

//OUTPUT:
\\\\\\\\\\\\\\\\\\\\\\\\\\First Analysis Output
0_0 (: /- :) 0-0
[ '0', '_', '0', '0', '0' ]
true
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////Second Analysis Ouyput
five|_/|four
[ 'f', 'i', 'v', 'e', '_', 'f', 'o', 'u', 'r' ]
true
//////////////////////////////////////////////////////////////

//Roman Numeral Converter
//Convert the given number into a roman numeral.

//Roman numerals	Arabic numerals
//      M	              1000
//      CM	            900
//      D	              500
//      CD	            400
//      C	              100
//      XC	            90
//      L	              50
//      XL	            40
//      X	              10
//      IX	            9
//      V	              5
//      IV	            4
//      I	              1
//All roman numerals answers should be provided in upper-case


//UNCHANGED CODE:

//    function convertToRoman(num) {
//     return num;
//    }

//    convertToRoman(36);

//CHANGED CODE:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\First Analysis
function convertToRoman(num) {
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  console.log(Object.values(romanNumerals))
 return num;
}

let result = convertToRoman(36);
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////////////////Second Analysis
function convertToRoman(num) {
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let preRomanNumeral = [];
  for (let i = 1; i <= num; i++) { 
    if (i === 1) {
      preRomanNumeral.push(romanNumerals[0]);
      } else if (i === 2) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0]);
      } else if (i === 3) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0] + romanNumerals[0]);
      }
      
  }
  console.log(preRomanNumeral);
  console.log(Object.values(romanNumerals))
 return num;
}

let result = convertToRoman(3);
console.log(result);
/////////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Third Analysis
function convertToRoman(num) {
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let preRomanNumeral = [];
  for (let i = 1; i <= num; i++) { 
    if (i === 1) {
      preRomanNumeral.push(romanNumerals[0]);
      } else if (i === 2) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0]);
      } else if (i === 3) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 4) {
      preRomanNumeral.push(romanNumerals[1]);
      } else if (i === 5) {
      preRomanNumeral.push(romanNumerals[2]);
      } else if (i === 6) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0]);
      } else if (i === 7) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 8) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 9) {
      preRomanNumeral.push(romanNumerals[3]);
      }    
  }
  console.log(preRomanNumeral);
  console.log(Object.values(romanNumerals))
 return num;
}

let result = convertToRoman(10);
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////Forth Analysis
function convertToRoman(num) {
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let returnedRomanNumeral = [];
  if (num < 10) {
  romanOnes(num, romanNumerals);
  };
  /*let preRomanNumeral = [];
  for (let i = 1; i <= num; i++) { 
    if (i === 1) {
      preRomanNumeral.push(romanNumerals[0]);
      } else if (i === 2) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0]);
      } else if (i === 3) {
      preRomanNumeral.push(romanNumerals[0] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 4) {
      preRomanNumeral.push(romanNumerals[1]);
      } else if (i === 5) {
      preRomanNumeral.push(romanNumerals[2]);
      } else if (i === 6) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0]);
      } else if (i === 7) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 8) {
      preRomanNumeral.push(romanNumerals[2] + romanNumerals[0] + romanNumerals[0] + romanNumerals[0]);
      } else if (i === 9) {
      preRomanNumeral.push(romanNumerals[3]);
      }    
  };*/ 
  console.log(romanOnes(num, romanNumerals));
  console.log(Object.values(romanNumerals))
 return num;
}

let result = convertToRoman(10);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
  };
  console.log(preRomanNumeral);
  return preRomanNumeral;
};
//////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Fifth Analysis
function convertToRoman(num) {
  let numClone = num.toString();
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let romanNumeralsOnes = [];
  let romanNumeralsTens = [];
  let romanNumeralsHundreds = [];
  let romanNumeralsThousands = [];
  for (let i = 0; i < romanNumerals.length; i++) {
    if (i < 4) {
      romanNumeralsOnes.push(romanNumerals[i]);
    } else if (i < 8) {
      romanNumeralsTens.push(romanNumerals[i]);
    } else if (i < 12) {
      romanNumeralsHundreds.push(romanNumerals[i]);
    } else if (i === 12) {
      romanNumeralsThousands.push(romanNumerals[i]);
    }; 
  };
  console.log(romanNumeralsThousands)
  let returnedRomanNumeral = [];
  if (numClone[1] === undefined) {
        romanOnes(num, romanNumerals);
  } else if (numClone[0] != "0") {
        romanOnes(num, romanNumerals);
  }
  /*for (let i = 1; i < num; i++) {
    let counterOne = 1;
    while (counterOne <= 9) {
       else if (num < 100) {
        romanTens(num, romanNumerals);
      }
      counterOne +=1;
    };
    
  };*/
  let numSplit = [];
  console.log(numSplit = numClone.split(""))
  console.log(romanOnes(num, romanNumerals));
  console.log(Object.values(romanNumerals))
 return num;
}

let result = convertToRoman(9);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  let counter = 1;
  if (numValue < 10) {
    for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
    };
  } else if (numValue < 100) {
    romanTens(numValue, roman, preRomanNumeral);
  }
  console.log(preRomanNumeral);
  return preRomanNumeral;
};

function romanTens(numValue, roman, romanOne) {
  let preRomanNumeral = []; 
    if (numValue === 10) {
      preRomanNumeral.push(roman[4]);
    } else if (numValue > 10 && numValue < 20){ 
        for (let counterTen = 0;counterTen <= 8; counterTen +=1) {
          preRomanNumeral.push(roman[4] + romanOne[counterTen]);
          preRomanNumeral.shift();
        }; 
    };  
    if (numValue === 20) {
      preRomanNumeral.push(roman[4] + roman[4]);
      preRomanNumeral.shift();
    } else if (numValue > 20 && numValue < 30) {
      for (let counterTwenty = 0;counterTen <= 8; counterTwenty +=1) {
        preRomanNumeral.push(roman[4] + roman[4] + roman[counterTwenty]);
        preRomanNumeral.shift();
      };
    }; 
    if (numValue === 30) {
      preRomanNumeral.push(roman[4] + roman[4] + roman[4]);
      preRomanNumeral.shift();
    } else if (numValue > 30 && numValue < 40) {
      for (let counterThirty = 0;counterTen <= 8; counterThirty +=1) {
        preRomanNumeral.push(roman[4] + roman[4] + roman[4] + roman[counterThirty]);
        preRomanNumeral.shift();
      };
     }; 
     if (numValue === 50) {
       preRomanNumeral.push(roman[5]);
       preRomanNumeral.shift();
     } else if (numValue > 50 && numValue < 60) {
      preRomanNumeral.push(roman[5] + roman[numValue]);
      preRomanNumeral.shift();
     };
     if (numValue < 60) {
      preRomanNumeral.push(roman[6] + roman[numValue]);
      preRomanNumeral.shift();
      } else if (numValue < 70) {
      preRomanNumeral.push(roman[6] + roman[4] + roman[numValue]);
      preRomanNumeral.shift();
      } else if (numValue < 80) {
      preRomanNumeral.push(roman[6] + roman[4] + roman[4] + roman[numValue]);
      preRomanNumeral.shift();
      } else if (numValue < 90) {
      preRomanNumeral.push(roman[6] + roman[4] + roman[4] + roman[4] + roman[numValue]);
      preRomanNumeral.shift();
      } else if (numValue < 100) {
      preRomanNumeral.push(roman[7]);
      preRomanNumeral.shift();
      };    
  
  console.log(preRomanNumeral);
  return preRomanNumeral;
};
/*let preRomanNumeral = [];
  for (let i = 10; i <= num; i++) { 
    if (i === 10) {
      preRomanNumeral.push(romanNumerals[4]);
      } else if (i === 20) {
      preRomanNumeral.push(romanNumerals[4] + romanNumerals[4]);
      } else if (i === 30) {
      preRomanNumeral.push(romanNumerals[4] + romanNumerals[4] + romanNumerals[4]);
      } else if (i === 40) {
      preRomanNumeral.push(romanNumerals[5]);
      } else if (i === 50) {
      preRomanNumeral.push(romanNumerals[6]);
      } else if (i === 60) {
      preRomanNumeral.push(romanNumerals[6] + romanNumerals[4]);
      } else if (i === 70) {
      preRomanNumeral.push(romanNumerals[6] + romanNumerals[4] + romanNumerals[4]);
      } else if (i === 80) {
      preRomanNumeral.push(romanNumerals[6] + romanNumerals[4] + romanNumerals[4] + romanNumerals[4]);
      } else if (i === 90) {
      preRomanNumeral.push(romanNumerals[7]);
      }    
  };
  let counterTen = 10;
    while (counterTen <= 90) {
      
      counterTen += 10;
    }*/ 
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////Sixth Analysis
function convertToRoman(num) {
 let numClone = num.toString();
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let romanNumeralsOnes = [];
  let romanNumeralsTens = [];
  let romanNumeralsHundreds = [];
  let romanNumeralsThousands = [];
  for (let i = 0; i < romanNumerals.length; i++) {
    if (i < 4) {
      romanNumeralsOnes.push(romanNumerals[i]);
    } else if (i < 8) {
      romanNumeralsTens.push(romanNumerals[i]);
    } else if (i < 12) {
      romanNumeralsHundreds.push(romanNumerals[i]);
    } else if (i === 12) {
      romanNumeralsThousands.push(romanNumerals[i]);
    }; 
  };
  let numSplit = [];
  console.log(numSplit = numClone.split(""));
  console.log(Number(numSplit[0]))
  let returnedRomanNumeralOnes = [];
  let returnedRomanNumeralTens = [];
  let returnedRomanNumeralHundreds = [];
  let returnedRomanNumeralThousands = [];
  if (numSplit.length === 1) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[0]), romanNumeralsOnes));
  } else if (numSplit.length === 2) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[0]), romanNumeralsTens));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[1]), romanNumeralsOnes));
  }
    
  }
  console.log(returnedRomanNumeralTens);
  console.log(returnedRomanNumeralOnes);
  console.log(returnedRomanNumeralTens + returnedRomanNumeralOnes);
 return num;
}

let result = convertToRoman(99);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  //let counter = 1;
  if (numValue < 10) {
    for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
    };
  }; 
  //console.log(preRomanNumeral);
  return preRomanNumeral;
};
//////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Seventh Analysis
function convertToRoman(num) {
 let numClone = num.toString();
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let romanNumeralsOnes = [];
  let romanNumeralsTens = [];
  let romanNumeralsHundreds = [];
  let romanNumeralsThousands = [];
  for (let i = 0; i < romanNumerals.length; i++) {
    if (i < 4) {
      romanNumeralsOnes.push(romanNumerals[i]);
    } else if (i < 8) {
      romanNumeralsTens.push(romanNumerals[i]);
    } else if (i < 12) {
      romanNumeralsHundreds.push(romanNumerals[i]);
    } else if (i === 12) {
      romanNumeralsThousands.push(romanNumerals[i]);
    }; 
  };
  let numSplit = [];
  console.log(numSplit = numClone.split(""));
  console.log(Number(numSplit[0]))
  let returnedRomanNumeralOnes = [];
  let returnedRomanNumeralTens = [];
  let returnedRomanNumeralHundreds = [];
  let returnedRomanNumeralThousands = [];
  if (numSplit.length === 1) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[0]), romanNumeralsOnes));
        return returnedRomanNumeralOnes.toString();
  } else if (numSplit.length === 2) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[0]), romanNumeralsTens));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[1]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralTens + returnedRomanNumeralOnes);
  };
  console.log(returnedRomanNumeralTens);
  console.log(returnedRomanNumeralOnes);
  console.log(returnedRomanNumeralTens + returnedRomanNumeralOnes);
 return num;
}

let result = convertToRoman(91);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  //let counter = 1;
  if (numValue < 10) {
    for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
    };
  }; 
  //console.log(preRomanNumeral);
  return preRomanNumeral;
};
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////Eighth Analysis
function convertToRoman(num) {
 let numClone = num.toString();
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let romanNumeralsOnes = [];
  let romanNumeralsTens = [];
  let romanNumeralsHundreds = [];
  let romanNumeralsThousands = [];
  for (let i = 0; i < romanNumerals.length; i++) {
    if (i < 4) {
      romanNumeralsOnes.push(romanNumerals[i]);
    } else if (i < 8) {
      romanNumeralsTens.push(romanNumerals[i]);
    } else if (i < 12) {
      romanNumeralsHundreds.push(romanNumerals[i]);
    } else if (i === 12) {
      romanNumeralsThousands.push(romanNumerals[i]);
    }; 
  };
  let numSplit = [];
  console.log(numSplit = numClone.split(""));
  console.log(Number(numSplit[0]))
  let returnedRomanNumeralOnes = [];
  let returnedRomanNumeralTens = [];
  let returnedRomanNumeralHundreds = [];
  let returnedRomanNumeralThousands = [];
  if (numSplit.length === 1) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[0]), romanNumeralsOnes));
        return returnedRomanNumeralOnes.toString();
  } else if (numSplit.length === 2) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[0]), romanNumeralsTens));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[1]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralTens + returnedRomanNumeralOnes);
  } else if (numSplit.length === 3) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsHundreds);
        returnedRomanNumeralHundreds = (romanOnes(Number(numSplit[0]), romanNumeralsHundreds));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(numSplit, romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[1]), romanNumeralsTens));
      };
      if (Number(numSplit[2]) < 10) {
        romanOnes(numSplit, romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[2]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralHundreds + returnedRomanNumeralTens + returnedRomanNumeralOnes);
  };
  console.log(returnedRomanNumeralTens);
  console.log(returnedRomanNumeralOnes);
  console.log(returnedRomanNumeralTens + returnedRomanNumeralOnes);
 return num;
}

let result = convertToRoman(999);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  //let counter = 1;
  if (numValue < 10) {
    for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
    };
  }; 
  //console.log(preRomanNumeral);
  return preRomanNumeral;
};
///////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\THE SOLUTION CODE
function convertToRoman(num) {
 let numClone = num.toString();
  let romanNumerals = "I,IV,V,IX,X,XL,L,XC,C,CD,D,CM,M".split(",");
  let romanNumeralsOnes = [];
  let romanNumeralsTens = [];
  let romanNumeralsHundreds = [];
  let romanNumeralsThousands = [];
  for (let i = 0; i < romanNumerals.length; i++) {
    if (i < 4) {
      romanNumeralsOnes.push(romanNumerals[i]);
    } else if (i < 8) {
      romanNumeralsTens.push(romanNumerals[i]);
    } else if (i < 12) {
      romanNumeralsHundreds.push(romanNumerals[i]);
    } else if (i === 12) {
      romanNumeralsThousands.push(romanNumerals[i]);
    }; 
  };
  let numSplit = [];
  console.log(numSplit = numClone.split(""));
  console.log(Number(numSplit[0]))
  let returnedRomanNumeralOnes = [];
  let returnedRomanNumeralTens = [];
  let returnedRomanNumeralHundreds = [];
  let returnedRomanNumeralThousands = [];
  if (numSplit.length === 1) {
        romanOnes(Number(numSplit[0]), romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[0]), romanNumeralsOnes));
        return returnedRomanNumeralOnes.toString();
  } else if (numSplit.length === 2) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[0]), romanNumeralsTens));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(Number(numSplit[1]), romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[1]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralTens + returnedRomanNumeralOnes);
  } else if (numSplit.length === 3) {
      if (Number(numSplit[0]) < 10) {
        romanOnes(Number(numSplit[0]), romanNumeralsHundreds);
        returnedRomanNumeralHundreds = (romanOnes(Number(numSplit[0]), romanNumeralsHundreds));
      };
      if (Number(numSplit[1]) < 10) {
        romanOnes(Number(numSplit[1]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[1]), romanNumeralsTens));
      };
      if (Number(numSplit[2]) < 10) {
        romanOnes(Number(numSplit[2]), romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[2]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralHundreds + returnedRomanNumeralTens + returnedRomanNumeralOnes);
  } else if (numSplit.length === 4) {
      if (Number(numSplit[0]) < 10) {
        returnedRomanNumeralThousands = romanOnes(Number(numSplit[0]), romanNumeralsThousands)
      }
      if (Number(numSplit[1]) < 10) {
        romanOnes(Number(numSplit[1]), romanNumeralsHundreds);
        returnedRomanNumeralHundreds = (romanOnes(Number(numSplit[1]), romanNumeralsHundreds));
      };
      if (Number(numSplit[2]) < 10) {
        romanOnes(Number(numSplit[2]), romanNumeralsTens);
        returnedRomanNumeralTens = (romanOnes(Number(numSplit[2]), romanNumeralsTens));
      };
      if (Number(numSplit[3]) < 10) {
        romanOnes(Number(numSplit[3]), romanNumeralsOnes);
        returnedRomanNumeralOnes = (romanOnes(Number(numSplit[3]), romanNumeralsOnes));
      };
      return (returnedRomanNumeralThousands + returnedRomanNumeralHundreds + returnedRomanNumeralTens + returnedRomanNumeralOnes);
  };
  console.log(returnedRomanNumeralTens);
  console.log(returnedRomanNumeralOnes);
  console.log(returnedRomanNumeralTens + returnedRomanNumeralOnes);
 return num;
}

let result = convertToRoman(3999);
console.log(result);

function romanOnes(numValue, roman) {
  let preRomanNumeral = [];
  //let counter = 1;
  if (numValue < 10) {
    for (let i = 1; i <= numValue; i++) { 
    if (i === 1) {
      preRomanNumeral.push(roman[0]);
      } else if (i === 2) {
      preRomanNumeral.push(roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 3) {
      preRomanNumeral.push(roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 4) {
      preRomanNumeral.push(roman[1]);
      preRomanNumeral.shift();
      } else if (i === 5) {
      preRomanNumeral.push(roman[2]);
      preRomanNumeral.shift();
      } else if (i === 6) {
      preRomanNumeral.push(roman[2] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 7) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 8) {
      preRomanNumeral.push(roman[2] + roman[0] + roman[0] + roman[0]);
      preRomanNumeral.shift();
      } else if (i === 9) {
      preRomanNumeral.push(roman[3]);
      preRomanNumeral.shift();
      };    
    };
  }; 
  //console.log(preRomanNumeral);
  return preRomanNumeral;
};
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

//OUTPUT:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Sixth Analysis Output
[ '9', '9' ]
9
[ 'XC' ]
[ 'IX' ]
XCIX
99
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////Seventh Analysis Output
[ '9', '1' ]
9
XCI
//////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Eighth Analysis Output
[ '9', '9', '9' ]
9
CMXCIX
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////////SOLUTION OUTPUT
[ '3', '9', '9', '9' ]
3
MMMCMXCIX
///////////////////////////////////////////////////////

//Caesars Cipher
//One of the simplest and most widely known ciphers is a "Caesar cipher", also known as a "shift cipher". 
//In a shift cipher the meanings of the letters are shifted by some set amount.

//A common modern use is the ROT13 cipher, where the values of the letters are shifted by 13 places. 
//Thus 'A ↔ N', 'B ↔ O' and so on.

//Write a function which takes a ROT13 encoded string as input and returns a decoded string.

//All letters will be uppercase. Do not transform any non-alphabetic character (i.e. spaces, punctuation), but do pass them on.




//UNCHANGED CODE:

//    function rot13(str) {
//      return str;
//    }

//    rot13("SERR PBQR PNZC");

//CHANGED CODE:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\First Analysis
function rot13(str) {
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
  
  let strClone = str.split("");
  console.log(alphabet, strClone);
  return str;
}

let result = rot13("SERR PBQR PNZC");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////Second Analysis
function rot13(str) {
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
  let halfAbet1 = alphabet.slice(0, 13);
  let halfAbet2 = alphabet.slice(13);
  let strClone = str.split(" ");
  let individualStrLetters = strClone[0].split("");
  let individualStrLettersArr = [];
  //console.log(halfAbet1, halfAbet2, strClone);
  for (let i = 0; i < strClone.length; i++) {
    //console.log(strClone[i]);
    if (i === (i + strClone.length) - strClone.length) {
      individualStrLetters = strClone[i].split("");
      individualStrLettersArr.push(individualStrLetters);
    };
  };
  console.log(individualStrLettersArr);

  return str;
}

let result = rot13("SERR PBQR PNZC");
console.log(result);
////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Third Analysis
function rot13(str) {
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
  let halfAbet1 = alphabet.slice(0, 13);
  let halfAbet2 = alphabet.slice(13);
  let strClone = str.split(" ");
  let individualStrLetters = strClone[0].split("");
  let individualStrLettersArr = [];
  for (let i = 0; i < strClone.length; i++) {
    if (i === (i + strClone.length) - strClone.length) {
      individualStrLetters = strClone[i].split("");
      individualStrLettersArr.push(individualStrLetters);
    };
  };

  for (let j = 0; j < 26; j++) {
    let matchPosition = alphabet[j];
    let matchPosition1 = halfAbet1[j];
    let matchPosition2 = halfAbet2[j];
    if (individualStrLettersArr[0].indexOf(matchPosition) === -1 ) {
      
        console.log(halfAbet1[j], halfAbet2[j], alphabet[j]);
        
    }
  }
  console.log(individualStrLettersArr);

  return str;
}

let result = rot13("SERR CVMMN!");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////Fourth Analysis
function rot13(str) {
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
  let halfAbet1 = alphabet.slice(0, 13);
  let halfAbet2 = alphabet.slice(13);
  let strClone = str.split(" ");
  let individualStrLetters = strClone[0].split("");
  let individualStrLettersArr = [];
  for (let i = 0; i < strClone.length; i++) {
    if (i === (i + strClone.length) - strClone.length) {
      individualStrLetters = strClone[i].split("");
      individualStrLettersArr.push(individualStrLetters);
    };
  };
  let pairedHalfAbet = [];
  for (let k= 0; k < 13; k++) {
    pairedHalfAbet.push(halfAbet1[k]);
    pairedHalfAbet.push(halfAbet2[k]);
  };
  
  //console.log(pairedHalfAbet);
  for (let j = 0; j < 26; j++) {
    let matchPosition = pairedHalfAbet[j];
    let matchPosition1 = halfAbet1[j];
    let matchPosition2 = halfAbet2[j];
    if (individualStrLettersArr[0].indexOf(matchPosition) === -1 ) {
      
        console.log(pairedHalfAbet[j], alphabet[j]);
        
    }
  }
  console.log(pairedHalfAbet);

  return str;
}

let result = rot13("SERR CVMMN!");
console.log(result);
//////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Fifth Analysis
function rot13(str) {
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
  let halfAbet1 = alphabet.slice(0, 13);
  let halfAbet2 = alphabet.slice(13);
  let strClone = str.split(" ");
  let individualStrLetters = strClone[0].split("");
  let individualStrLettersArr = [];
  for (let i = 0; i < strClone.length; i++) {
    if (i === (i + strClone.length) - strClone.length) {
      individualStrLetters = strClone[i].split("");
      individualStrLettersArr.push(individualStrLetters);
    };
  };
  let pairedHalfAbet = [];
  for (let k= 0; k < 13; k++) {
    pairedHalfAbet.push(halfAbet1[k]);
    pairedHalfAbet.push(halfAbet2[k]);
  };
  let pairedArr = [];
  for (let l = 0; l < 26; l+=2) {
    pairedArr.push(pairedHalfAbet.slice(l, l + 2));
  };
  for (let w = 0; w < individualStrLettersArr.length; w++) {
    
    for (let x = 0; x < individualStrLettersArr[w].length; x++) {
      let matchPosition = individualStrLettersArr[w][x];
       console.log(individualStrLettersArr[w][x]);
      for (let y = 0; y < pairedArr.length; y++) {

        for (let z = 0; z < pairedArr[y].length; z++) {
          if (pairedArr[z].indexOf(matchPosition) === -1) {
            console.log((pairedArr[y]));
            }
        }
      }
    }
  }
  
  for (let j = 0; j < 26; j++) {
    let matchPosition = pairedHalfAbet[j];
    let matchPosition1 = halfAbet1[j];
    let matchPosition2 = halfAbet2[j];
    if (individualStrLettersArr[0].indexOf(matchPosition) === -1 ) {
      
        console.log(pairedHalfAbet[j], alphabet[j]);
        
    }
  }
  console.log(pairedHalfAbet);

  return str;
}

let result = rot13("SERR CVMMN!");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////////Sixth Analysis
function rot13(str) {
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
  let halfAbet1 = alphabet.slice(0, 13);
  let halfAbet2 = alphabet.slice(13);
  let strClone = str.split(" ");
  let individualStrLetters = strClone[0].split("");
  let individualStrLettersArr = [];
  for (let i = 0; i < strClone.length; i++) {
    if (i === (i + strClone.length) - strClone.length) {
      individualStrLetters = strClone[i].split("");
      individualStrLettersArr.push(individualStrLetters);
    };
  };
  let pairedHalfAbet = [];
  for (let k= 0; k < 13; k++) {
    pairedHalfAbet.push(halfAbet1[k]);
    pairedHalfAbet.push(halfAbet2[k]);
  };
  
  let pairedArr = [];
  for (let l = 0; l < 26; l+=2) {
    pairedArr.push(pairedHalfAbet.slice(l, l + 2));
  };
  
  for (let w = 0; w < individualStrLettersArr.length; w++) {
    
    for (let x = 0; x < individualStrLettersArr[w].length; x++) {
      let matchPosition = individualStrLettersArr[w][x];
       //console.log(individualStrLettersArr[w][x]);
      for (let y = 0; y < pairedArr.length; y++) {

        for (let z = 0; z < pairedArr[y].length; z++) {
          if (pairedArr[z].indexOf(matchPosition) === -1) {
            //console.log((pairedArr[y]));
            }
        }
      }
    }
  };
  let pairedArrClone = pairedArr.slice();
  let backendPairedArr = pairedArrClone.reverse().slice();
  console.log(backendPairedArr);
  for (let j = 0; j < 13; j++) {
    let matchPosition1 = pairedHalfAbet[j];
    let matchPosition2 = halfAbet1[j];
    let matchPosition3 = halfAbet2[j];
    if (individualStrLettersArr[0].indexOf(matchPosition2) === -1 ) {
        console.log(pairedArr[j], halfAbet1[j]);   
    } else if (individualStrLettersArr[0].indexOf(matchPosition3) === -1 ) {
        console.log(pairedArr[j], halfAbet2[j]);
    }
  }
  //console.log(pairedHalfAbet);

  return str;
}

let result = rot13("SERR CVMMN!");
console.log(result);
///////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\THE SOLUTION CODE
function rot13(str) {
  let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
  let inverseAlphabet = "NOPQRSTUVWXYZABCDEFGHIJKLM".split("");
  let decodedMessage = "";
  for (let i = 0; i < str.length; i++) {
    if (alphabet.indexOf(str[i]) !== -1) {
      decodedMessage += inverseAlphabet[alphabet.indexOf(str[i])];
    } else decodedMessage += str[i];
  };

  //console.log(decodedMessage);

  return decodedMessage;
}

let result = rot13("GUR DHVPX OEBJA SBK WHZCF BIRE GUR YNML QBT.");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

//OUTPUT:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Second Analysis
[ [ 'S', 'E', 'R', 'R' ],
  [ 'P', 'B', 'Q', 'R' ],
  [ 'P', 'N', 'Z', 'C' ] ]
SERR PBQR PNZC
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////////////Third Analysis Output
A N A
B O B
C P C
D Q D
F S F
G T G
H U H
I V I
J W J
K X K
L Y L
M Z M
undefined undefined N
undefined undefined O
undefined undefined P
undefined undefined Q
undefined undefined T
undefined undefined U
undefined undefined V
undefined undefined W
undefined undefined X
undefined undefined Y
undefined undefined Z
[ [ 'S', 'E', 'R', 'R' ], [ 'C', 'V', 'M', 'M', 'N', '!' ] ]
SERR CVMMN!
/////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Fourth Analysis Output
A A
N B
B C
O D
C E
P F
D G
Q H
F K
G M
T N
H O
U P
I Q
V R
J S
W T
K U
X V
L W
Y X
M Y
Z Z
[ 'A',
  'N',
  'B',
  'O',
  'C',
  'P',
  'D',
  'Q',
  'E',
  'R',
  'F',
  'S',
  'G',
  'T',
  'H',
  'U',
  'I',
  'V',
  'J',
  'W',
  'K',
  'X',
  'L',
  'Y',
  'M',
  'Z' ]
SERR CVMMN!
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////SOLUTION OUTPUT
THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.
///////////////////////////////////////////////////////////////////////////////////////////

//Telephone Number Validator
//Return 'true' if the passed string looks like a valid US phone number.

//The user may fill out the form field any way they choose as long as it has the format of a valid US number. 
//The following are examples of valid formats for US numbers (refer to the tests below for other variants):

//    555-555-5555
//    (555)555-5555
//    (555) 555-5555
//    555 555 5555
//    5555555555
//    1 555 555 5555
//For this challenge you will be presented with a string such as '800-692-7753' or '8oo-six427676;laskdjf'. 
//Your job is to validate or reject the US phone number based on any combination of the formats provided above. 
//The area code is required. If the country code is provided, you must confirm that the country code is '1'. 
//Return 'true' if the string is a valid US phone number; otherwise return 'false'.


//UNCHANGED CODE:

//    function telephoneCheck(str) {
//      return true;
//    }

//    telephoneCheck("555-555-5555");

//CHANGED CODE:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\First Analysis
function telephoneCheck(str) {
  let strClone = str.slice();
  console.log(strClone.match(/(^[\W]*)(^[\d]*)([\W]*)/g))
  if (strClone.match(/(^[\W]*)(^[\d]*)([\W]*)/g) !== null) {
    console.log(strClone);
    return true;
  } else return false;
  
};

let result = telephoneCheck("(555)555-5555");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Passes several requirements
/////////////////////////////////Second Analysis
function telephoneCheck(str) {
  let strClone = str.slice();
  console.log(strClone.match(/(^[1]*)(^[\W]*)(^[\d]*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d])/g))
  if (strClone.match(/(^[1]*)(^[\W]*)(^[\d]*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d])/g) !== null) {
    console.log(strClone);
    return true;
  } else return false;
  
}

telephoneCheck("(555)555-5555");
////////////////////////////////////////////////////////////////////Passes several Requirements
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Third Analysis
function telephoneCheck(str) {
  let strClone = str.slice();
  console.log(strClone.match(/(^[1]*)(^[\W]*)(^[\d]*)([\W]*)(([\d])([\d])([\d])*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g));
  console.log(strClone.match(/(^[1]*)(^[^0|2|10]+)(^[\W]*)(^[\d]*)([\W]*)(([\d])([\d])([\d])*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g));
  if (strClone.match(/(^[1]*)(^[\W]*)(^[\d]*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g) !== null) {
    console.log(strClone);
    return true;
  } else if (strClone.match(/(^[1]*)(^[^0|2|10]+)(^[\W]*)(^[\d]*)([\W]*)(([\d])([\d])([\d])*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g) !== null){
    console.log(strClone);
    return true;
  } else return false;
  
  
};

let result = telephoneCheck("1 (555) 555-5555");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////////////Forth Analysis
function telephoneCheck(str) {
  let strClone = str.slice();
  //strClone.match(/(^[1]*)(^[\W]*)(^[\d\d\d]*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g
  console.log(strClone.match(/(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/g));
  console.log(strClone.match(/(^[1]*)(^[^0|2|10]+)(^[\W]*)(^[\d]*)([\W]*)(([\d])([\d])([\d])*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g));
  if (strClone.match(/(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/) !== null) {
    console.log(strClone);
    return true;
  } else if (strClone.match(/(^[1]*)(^[^0|2|10]+)(^[\W]*)(^[\d]*)([\W]*)(([\d])([\d])([\d])*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g) !== null){
    console.log(strClone);
    return true;
  } else return false;
  
  
};

let result = telephoneCheck("1 (555) 555-5555");
console.log(result);
///////////////////////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Fifth Analysis
function telephoneCheck(str) {
  let strClone = str.slice();
  console.log(strClone.match(/(^[1]*)(^[\W]*)(^[\d\d\d]*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g))
  console.log(strClone.match(/(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/g));
  console.log(strClone.match(/([^0|2|10]+)(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/));
  console.log(Object.keys(strClone))
  
  if (strClone.match(/(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/) !== null) {
    console.log(strClone);
    if (strClone.length >= 11 && strClone[0] !== "1" && strClone[1] !== "1" && strClone[1] !== "0") {
    console.log(strClone);
    return false;
  } else if (strClone.length < 10) {
    return false;
  }; 
    return true;
  } else return false;
  
  
};

let result = telephoneCheck("10 (757) 622-7382");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////////////////Sixth Analysis
function telephoneCheck(str) {
  let strClone = str.slice();
  let reducedClone = strClone.replace(/([\s ])|([-])/g, "");
  console.log(reducedClone);
  //strClone.match(/(^[1]*)(^[\W]*)(^[\d\d\d]*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g)   strClone.match(/(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/)
  console.log(reducedClone.match(/(^[1]*)(([\d\d\d]*))([\d\d\d])([\d\d\d\d]$)/g));
  console.log(strClone.match(/([^0|2|10]+)(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/));
  console.log(Object.keys(reducedClone).length)
  
  if (reducedClone.match(/(^[1]*)(([\d\d\d]))([\d\d\d])([\d\d\d\d]$)/g) !== null) {
    console.log(strClone);
    if (Object.keys(reducedClone).length === 11 && strClone[0] === "1") {
    console.log(strClone);
    return true;
  } else if (Object.keys(reducedClone).length === 12 && strClone[0] === "1") {
    console.log(strClone);
    return false;
  } else if (Object.keys(reducedClone).length === 13 && strClone[0] === "1") {
    console.log(strClone);
    return true;
  } else if (Object.keys(reducedClone).length === 10) {
    console.log(strClone);
    return true;
  };
  } else return false;
  
  
};

let result = telephoneCheck("1 555)555-5555");
console.log(result);
///////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Seventh Analysis
function telephoneCheck(str) {
  let strClone = str.slice();
  let reducedClone = strClone.replace(/[\s\(\)\-]/g, "");
  console.log(reducedClone);
  if (reducedClone.length < 10 || reducedClone.length > 11) {
    return false
  } else if (strClone.match(/(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/) !== null) {
    console.log(reducedClone)
  }
 return false;
  
  
};

let result = telephoneCheck("55 55-55-555-5");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////////////Eighth Analysis
function telephoneCheck(str) {
  let strClone = str.slice();
  let reducedClone = strClone.slice().replace(/[\s\(\)\-]/g, "");
  let notNumbersClone = strClone.slice().replace(/[\d]/g, "");
  let dashClone = strClone.slice().replace(/[\s\(\)\d]/g, "");
  let bracketsClone = strClone.slice().replace(/[\s\d\-]/g, "");
  //console.log(dashClone);
  //console.log(bracketsClone);
  //console.log(notNumbersClone);
  //console.log(strClone.match(/(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/g));
  if (reducedClone.length < 10 || reducedClone.length > 11) {
    return false
  } else if (dashClone.length <= 2 && bracketsClone.length === 0) {
    if (strClone.match(/(^[1])(^[\W]*)(^[\d\d\d]*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g) !== null) {
      //console.log(reducedClone)
      return true;
    } 
  } else if (bracketsClone.length === 2 && dashClone.length <= 1) {
      if (strClone.match(/(^[1])(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/g) !== null) {
        if (Object.values(reducedClone[0]) !== '2' || reducedClone[0] !== 0) {
          console.log(Object.values(reducedClone[0]))
          return true;
        }
      } 
  } 
 return false;
 // /(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/
 //  /(^[1]*)([2-9]{1}[\d]{2})([2-9]{1}[\d]{2})([\d]{4}$)/
};

let result = telephoneCheck("5555555555");
console.log(result);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Nineth Analysis
function telephoneCheck(str) {
  let strClone = str.slice();
  let reducedClone = strClone.slice().replace(/[\s\(\)\-]/g, "");
  let notNumbersClone = strClone.slice().replace(/[\d]/g, "");
  let dashClone = strClone.slice().replace(/[\s\(\)\d]/g, "");
  let bracketsClone = strClone.slice().replace(/[\s\d\-]/g, "");
  //console.log(dashClone);
  //console.log(bracketsClone);
  //console.log(notNumbersClone);
  //console.log(strClone.match(/(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/g));
  if (reducedClone.length < 10 || reducedClone.length > 11) {
    return false
  } else if (dashClone.length <= 2 && bracketsClone.length === 0) {
    if (strClone.match(/(^[1]*)(^[\W]*)(^[\d\d\d]*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g) !== null && reducedClone[0] !== '2') {
      //console.log(reducedClone)
      return true;
    } 
  } else if (bracketsClone.length === 2 && dashClone.length <= 1) {
      if (strClone.match(/(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/g) !== null && reducedClone[0] !== '2') {
        if (Object.values(reducedClone[0]) !== '2' || reducedClone[0] !== 0) {
          console.log(Object.values(reducedClone[0]))
          return true;
        }
      } 
  } 
 return false;
 // /(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/
 //  /(^[1]*)([2-9]{1}[\d]{2})([2-9]{1}[\d]{2})([\d]{4}$)/
};

let result = telephoneCheck("5555555555");
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\passes all but one test
///////////////////////////SOLUTION CODE
function telephoneCheck(str) {
  let strClone = str.slice();
  let reducedClone = strClone.slice().replace(/[\s\(\)\-]/g, "");
  let dashClone = strClone.slice().replace(/[\s\(\)\d]/g, "");
  let bracketsClone = strClone.slice().replace(/[\s\d\-]/g, "");
  
  console.log(strClone.match(/(^[1]*)([^0])(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/g));
  if (reducedClone.length < 10 || reducedClone.length > 11) {
    return false
  } else if (dashClone.length <= 2 && bracketsClone.length === 0) {
    if (strClone.match(/(^[1]*)(^[\W]*)(^[\d\d\d]*)([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\W]*)([\d])([\d])([\d])([\d]$)/g) !== null && reducedClone[0] !== '2') {
      
      return true;
    } 
  } else if (bracketsClone.length === 2 && dashClone.length <= 1) {
      if (strClone.match(/(^[1]*)(^[\W\d\d\d\W]*)(([\d\d\d]*))([\W]*)([\d\d\d])([\W]*)([\d\d\d\d]$)/g) !== null && reducedClone[0] !== '2' && reducedClone[0] !== '0') {
        if (reducedClone[0] !== '0') {
          console.log(reducedClone)
          return true;
        }
      } 
  } 
 return false;
 
};

let result = telephoneCheck("0 (757) 622-7382");
console.log(result);
////////////////////////////////////////////////////////////////////
//OUTPUT:

//Cash Register
//Design a cash register drawer function 'checkCashRegister()' that accepts purchase price as the first argument ('price'), 
//    payment as the second argument ('cash'), and cash-in-drawer ('cid') as the third argument.

//'cid' is a 2D array listing available currency.

//The 'checkCashRegister()' function should always return an object with a 'status' key and a 'change' key.

//Return '{status: "INSUFFICIENT_FUNDS", change: []}' if cash-in-drawer is less than the change due, or if you cannot return the exact change.

//Return '{status: "CLOSED", change: [...]}' with cash-in-drawer as the value for the key 'change' if it is equal to the change due.

//Otherwise, return '{status: "OPEN", change: [...]}', with the change due in coins and bills, 
//    sorted in highest to lowest order, as the value of the 'change' key.

//    Currency Unit	          Amount
//    Penny	              $0.01 (PENNY)
//    Nickel	            $0.05 (NICKEL)
//    Dime	              $0.1 (DIME)
//    Quarter	            $0.25 (QUARTER)
//    Dollar	            $1 (ONE)
//    Five Dollars	      $5 (FIVE)
//    Ten Dollars	        $10 (TEN)
//    Twenty Dollars	    $20 (TWENTY)
//    One-hundred Dollars	$100 (ONE HUNDRED)
//See below for an example of a cash-in-drawer array:

//    [
//      ["PENNY", 1.01],
//      ["NICKEL", 2.05],
//      ["DIME", 3.1],
//      ["QUARTER", 4.25],
//      ["ONE", 90],
//      ["FIVE", 55],
//      ["TEN", 20],
//      ["TWENTY", 60],
//      ["ONE HUNDRED", 100]
//    ]


//UNCHANGED CODE:

//    function checkCashRegister(price, cash, cid) {
//      let change;
//      return change;
//    }

//    checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]);

//CHANGED CODE:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\First Analysis
function checkCashRegister(price, cash, cid) {
  let registerStatus = [{status: "OPEN", change: []},
  {status: "INSUFFICIENT_FUNDS", change: []}, {status: "CLOSED", change: []}];
  let currentStatus = {};
  //console.log(registerStatus);
  //console.log(arguments);
  console.log(currentStatus);
  
  return registerStatus;
}

let result = checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]);
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////////////////////////////Second Analysis
function checkCashRegister(price, cash, cid) {
const denominations = [["PENNY", 1], 
["NICKEL", 5], 
["DIME", 10], 
["QUARTER", 25], 
["ONE", 100], 
["FIVE", 500], 
["TEN", 1000], 
["TWENTY", 2000], 
["ONE HUNDRED", 10000]];
  let totalStartCID = ((cid[0][1] * 100) + (cid[1][1] * 100) + 
  (cid[2][1] * 100) + (cid[3][1] * 100) + 
  (cid[4][1] * 100) + (cid[5][1] * 100) + 
  (cid[6][1] * 100) + (cid[7][1] * 100) + (cid[8][1] * 100));
  console.log(totalStartCID);
  let change = (cash * 100) - (price * 100);
  let balanceCID = totalStartCID - change;
  console.log(balanceCID);
  let registerStatus = [{status: "OPEN", change: totalStartCID},
  {status: "INSUFFICIENT_FUNDS", change: []}, {status: "CLOSED", change: balanceCID}];
  let currentStatus = {};
  console.log(cid);
  console.log(change);
  console.log(currentStatus);
  
  return registerStatus;
}

let result = checkCashRegister(19.5, 20, 
[["PENNY", 1.01], 
["NICKEL", 2.05], 
["DIME", 3.1], 
["QUARTER", 4.25], 
["ONE", 90], 
["FIVE", 55], 
["TEN", 20], 
["TWENTY", 60], 
["ONE HUNDRED", 100]]);
console.log(result);
//////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Third Analysis
function checkCashRegister(price, cash, cid) {
  const denominations = [["PENNY", 1], 
["NICKEL", 5], 
["DIME", 10], 
["QUARTER", 25], 
["ONE", 100], 
["FIVE", 500], 
["TEN", 1000], 
["TWENTY", 2000], 
["ONE HUNDRED", 10000]];
  let totalStartCID = ((cid[0][1] * 100) + (cid[1][1] * 100) + 
  (cid[2][1] * 100) + (cid[3][1] * 100) + 
  (cid[4][1] * 100) + (cid[5][1] * 100) + 
  (cid[6][1] * 100) + (cid[7][1] * 100) + (cid[8][1] * 100));
  console.log(totalStartCID);
  let change = (cash * 100) - (price * 100);
  let balanceCID = totalStartCID - change;
  console.log(balanceCID / 100);
  let registerStatus = [{status: "OPEN", change: (totalStartCID / 100)},
  {status: "INSUFFICIENT_FUNDS", change: []}, {status: "CLOSED", change: (balanceCID / 100)}];
  let currentStatus = {};
  const denominationComparetor = [];

  if (change < 100 && change > 0) {
    let smallChange = cid.slice(0, 4);
    console.log(change);
    for (let i = 0; i < smallChange.length; i++) {
      denominationComparetor.push((denominations[i][1] / 100));
      
    };
    if (change > 41  && change < 50) {
        console.log(denominationComparetor);
    } else if (change >= 50 && change < 100) {
        console.log(denominationComparetor);
    };
    console.log(denominationComparetor);
  } else if (change < 10000 && change >= 100) {
    let mediumChange = cid.slice(0,8);
    console.log(mediumChange);
  } else if (change >= 10000) {
    let largeChange = cid.slice();
    console.log(largeChange);
  } else if (change === 0) {
    let openStatus = cid.slice(0,8);
    console.log(openStatus);
  }

  //console.log(cid);
  //console.log(change);
  console.log(currentStatus);
  
  return registerStatus;
}

let result = checkCashRegister(19.5, 20, 
[["PENNY", 1.01], 
["NICKEL", 2.05], 
["DIME", 3.1], 
["QUARTER", 4.25], 
["ONE", 90], 
["FIVE", 55], 
["TEN", 20], 
["TWENTY", 60], 
["ONE HUNDRED", 100]]);
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////////////////////Forth Analysis
function checkCashRegister(price, cash, cid) {
  const denominations = [["PENNY", 1], 
["NICKEL", 5], 
["DIME", 10], 
["QUARTER", 25], 
["ONE", 100], 
["FIVE", 500], 
["TEN", 1000], 
["TWENTY", 2000], 
["ONE HUNDRED", 10000]];
  let totalStartCID = ((cid[0][1] * 100) + (cid[1][1] * 100) + 
  (cid[2][1] * 100) + (cid[3][1] * 100) + 
  (cid[4][1] * 100) + (cid[5][1] * 100) + 
  (cid[6][1] * 100) + (cid[7][1] * 100) + (cid[8][1] * 100));
  //console.log(totalStartCID);
  let change = (cash * 100) - (price * 100);
  let balanceCID = totalStartCID - change;
  //console.log(balanceCID / 100);
  let currentCOH = {};
  let registerStatus = [{status: "OPEN", change: []},
  {status: "INSUFFICIENT_FUNDS", change: []}, {status: "CLOSED", change: []}];
  let currentStatus = [];
  const denominationComparetor = [];

  if (change < 100 && change > 0) {
    let smallChange = cid.slice(0, 4);
    console.log(change);
    for (let i = 0; i < smallChange.length; i++) {
      denominationComparetor.push((denominations[i][1] / 100));
      
    };
    if (change > 41  && change < 50) {
        console.log(denominationComparetor);
    } else if (change >= 50 && change < 100) {
        console.log(denominationComparetor);
    };
    console.log(denominationComparetor);
  } else if (change < 10000 && change >= 100) {
    let mediumChange = cid.slice(0,8);
    console.log(mediumChange);
  } else if (change >= 10000) {
    let largeChange = cid.slice();
    console.log(largeChange);
  } else if (change === 0) {
    let openStatus = cid.slice(0,9);
    //console.log(openStatus);
    for (let m = 0; m < cid.length; m++) {
      currentStatus.push(openStatus[m]);
      /*for (let n = 0; n < cid[m].length; n++) {
        registerStatus[0].change.push(currentStatus[m][n]);
      };*/
    };
    cid.forEach(function(currentStatus){
      currentCOH[currentStatus[0]] = currentStatus[1]
    });
  };
  

  console.log(currentCOH);
  //console.log(Object.keys(registerStatus[0].change));
  console.log(Object.values(currentStatus[0]));
  
  return registerStatus;
}

let result = checkCashRegister(0, 0, 
[["PENNY", 1.01], 
["NICKEL", 2.05], 
["DIME", 3.1], 
["QUARTER", 4.25], 
["ONE", 90], 
["FIVE", 55], 
["TEN", 20], 
["TWENTY", 60], 
["ONE HUNDRED", 100]]);
console.log(result);
///////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Fifth Analysis
function checkCashRegister(price, cash, cid) {
  const denominations = [["PENNY", 1], 
["NICKEL", 5], 
["DIME", 10], 
["QUARTER", 25], 
["ONE", 100], 
["FIVE", 500], 
["TEN", 1000], 
["TWENTY", 2000], 
["ONE HUNDRED", 10000]];
  let totalStartCID = ((cid[0][1] * 100) + (cid[1][1] * 100) + 
  (cid[2][1] * 100) + (cid[3][1] * 100) + 
  (cid[4][1] * 100) + (cid[5][1] * 100) + 
  (cid[6][1] * 100) + (cid[7][1] * 100) + (cid[8][1] * 100));
  //console.log(totalStartCID);
  let change = (cash * 100) - (price * 100);
  let balanceCID = totalStartCID - change;
  //console.log(balanceCID / 100);
  let currentCOH = {};
  let registerStatus = [{status: "OPEN", change: []},
  {status: "INSUFFICIENT_FUNDS", change: []}, {status: "CLOSED", change: []}];
  let currentStatus = [];
  const denominationComparetor = [];

  cid.forEach(function(currentStatus){
      console.log(currentCOH[currentStatus[0]] = currentStatus[1]);
  });
  let testCOH = {};
  let index = denominations.length - 1;
  while (index >= 0) {
    if (change - denominations[index][1] >= 0){
      console.log(denominations[index]);
    ;}
    index -= 1;
  }

  //console.log(testCOH);
  //console.log(Object.keys(registerStatus[0].change));
  console.log(currentCOH);
  
  return registerStatus;
}

let result = checkCashRegister(19.5, 20, 
[["PENNY", 1.01], 
["NICKEL", 2.05], 
["DIME", 3.1], 
["QUARTER", 4.25], 
["ONE", 90], 
["FIVE", 55], 
["TEN", 20], 
["TWENTY", 60], 
["ONE HUNDRED", 100]]);
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////////Sixth Analysis
function checkCashRegister(price, cash, cid) {
  const denominations = [["PENNY", 1], 
["NICKEL", 5], 
["DIME", 10], 
["QUARTER", 25], 
["ONE", 100], 
["FIVE", 500], 
["TEN", 1000], 
["TWENTY", 2000], 
["ONE HUNDRED", 10000]];
  let totalStartCID = ((cid[0][1] * 100) + (cid[1][1] * 100) + 
  (cid[2][1] * 100) + (cid[3][1] * 100) + 
  (cid[4][1] * 100) + (cid[5][1] * 100) + 
  (cid[6][1] * 100) + (cid[7][1] * 100) + (cid[8][1] * 100));
  //console.log(totalStartCID);
  let change = (cash * 100) - (price * 100);
  let balanceCID = totalStartCID - change;
  //console.log(balanceCID / 100);
  let currentCOH = {};
  let registerStatus = {status: "", change: []};
  let currentStatus = [];
  const denominationComparetor = [];

  cid.forEach(function(currentStatus){
      currentCOH[currentStatus[0]] = currentStatus[1];
  });
  let testCOH = {};
  let index = denominations.length - 1;
  while (index >= 0) {
    if (change - denominations[index][1] >= 0){
      if (change / denominations[index][1] !== change && 
          change / denominations[index][1] <= denominations[index][1] &&
          change / denominations[index][1] !== denominations[index][1] / 2) {
            if (denominations[index] === denominations[3]) {
              //console.log(Object.keys(denominations[index]))
              console.log((cid[index][1] * 100) - change);
              console.log(registerStatus.status = "OPEN");
              console.log(registerStatus.change[denominations[index][0]] = ((cid[index][1] * 100) - change) / 100);
              currentStatus.push(denominations[index][0]);
              console.log(currentStatus.push(change / 100));
              //console.log(currentStatus);
              console.log(registerStatus.change = [currentStatus]);
            }
        } 
      };
    index -= 1;
  };

  console.log(registerStatus);
  console.log(Object.keys(registerStatus));
  console.log(Object.keys(currentCOH));
  
  return registerStatus;
}

let result = checkCashRegister(19.5, 20, 
[["PENNY", 1.01], 
["NICKEL", 2.05], 
["DIME", 3.1], 
["QUARTER", 4.25], 
["ONE", 90], 
["FIVE", 55], 
["TEN", 20], 
["TWENTY", 60], 
["ONE HUNDRED", 100]]);
console.log(result);
////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Seventh Analysis
function checkCashRegister(price, cash, cid) {
  const denominations = [["PENNY", 1], 
["NICKEL", 5], 
["DIME", 10], 
["QUARTER", 25], 
["ONE", 100], 
["FIVE", 500], 
["TEN", 1000], 
["TWENTY", 2000], 
["ONE HUNDRED", 10000]];
  let totalStartCID = ((cid[0][1] * 100) + (cid[1][1] * 100) + 
  (cid[2][1] * 100) + (cid[3][1] * 100) + 
  (cid[4][1] * 100) + (cid[5][1] * 100) + 
  (cid[6][1] * 100) + (cid[7][1] * 100) + (cid[8][1] * 100));
  //console.log(totalStartCID);
  let change = (cash * 100) - (price * 100);
  let balanceCID = totalStartCID - change;
  console.log(change);
  console.log(balanceCID / 100);
  let currentCOH = {};
  let registerStatus = {status: "", change: []};
  let currentStatus = [];
  const denominationComparetor = [];

  cid.forEach(function(currentStatus){
      currentCOH[currentStatus[0]] = currentStatus[1];
  });
  let testCOH = {};
  let index = denominations.length - 1;
  while (index >= 0) {
    if (change - denominations[index][1] >= 0){
      if (change / denominations[index][1] !== change && 
          change / denominations[index][1] <= denominations[index][1] &&
          change / denominations[index][1] !== denominations[index][1] / 2) {
            if (denominations[index] === denominations[3]) {
              //console.log(Object.keys(denominations[index]))
              console.log((cid[index][1] * 100) - change);
              console.log(registerStatus.status = "OPEN");
              console.log(registerStatus.change[denominations[index][0]] = ((cid[index][1] * 100) - change) / 100);
              currentStatus.push(denominations[index][0]);
              console.log(currentStatus.push(change / 100));
              //console.log(currentStatus);
              console.log(registerStatus.change = [currentStatus]);
            } else if (denominations[index] === denominations[7]) {
                //console.log(Object.keys(denominations[index]))
              console.log((cid[index][1] * 100) - change);
              if (((cid[index][1] * 100) - change) < 0) {
                registerStatus.status = "OPEN";
                //console.log(registerStatus.change[denominations[index][0]] = ((cid[index][1] * 100) - change) / 100);
              currentStatus.push(denominations[index][0]);
              currentStatus.push((cid[index][1] * 100)/ 100);
              console.log(change = change - (cid[index][1] * 100));
              console.log(registerStatus.change = [currentStatus]);
              };
            } else if (denominations[index] === denominations[6]) {
              console.log((cid[index][1] * 100) - change);
              if (((cid[index][1] * 100) - change) < 0) {
                currentStatus.push(denominations[index][0]);
                currentStatus.push((cid[index][1] * 100)/ 100);
                change = change - (cid[index][1] * 100);
                console.log(registerStatus.change = [currentStatus]);
              }
            }
        } 
      };
    index -= 1;
  };

  console.log(registerStatus);
  console.log(Object.keys(registerStatus));
  console.log(Object.keys(currentCOH));
  
  return registerStatus;
}

let result = checkCashRegister(3.26, 100, 
[["PENNY", 1.01], 
["NICKEL", 2.05], 
["DIME", 3.1], 
["QUARTER", 4.25], 
["ONE", 90], 
["FIVE", 55], 
["TEN", 20], 
["TWENTY", 60], 
["ONE HUNDRED", 100]]);
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////////////////////////Eighth Analysis
function checkCashRegister(price, cash, cid) {
  const denominations = [["PENNY", 1], 
["NICKEL", 5], 
["DIME", 10], 
["QUARTER", 25], 
["ONE", 100], 
["FIVE", 500], 
["TEN", 1000], 
["TWENTY", 2000], 
["ONE HUNDRED", 10000]];
  let totalStartCID = ((cid[0][1] * 100) + (cid[1][1] * 100) + 
  (cid[2][1] * 100) + (cid[3][1] * 100) + 
  (cid[4][1] * 100) + (cid[5][1] * 100) + 
  (cid[6][1] * 100) + (cid[7][1] * 100) + (cid[8][1] * 100));
  //console.log(totalStartCID);
  let change = (cash * 100) - (price * 100);
  let balanceCID = totalStartCID - change;
  //console.log(change);
  //console.log(balanceCID / 100);
  let currentCOH = {};
  let registerStatus = {status: "", change: []};
  let currentStatus = [];
  const denominationComparetor = [];

  cid.forEach(function(currentStatus){
      currentCOH[currentStatus[0]] = currentStatus[1];
  });
  let testCOH = {};
  let index = denominations.length - 1;
  while (index >= 0) {
    let changeStatusArr = [];
    if (change - denominations[index][1] >= 0){
      if (change / denominations[index][1] !== change && 
          change / denominations[index][1] <= denominations[index][1] &&
          change / denominations[index][1] !== denominations[index][1] / 2) {
            if (denominations[index] === denominations[3] && change <= 50) {
              
                (cid[index][1] * 100) - change;
                registerStatus.status = "OPEN";
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(change / 100);
                currentStatus.push(changeStatusArr);
                change = change - (cid[index][1] * 100);
                registerStatus.change = currentStatus;
            } else if (denominations[index] === denominations[7]) {
                
              //console.log((cid[index][1] * 100) - change);
              if (((cid[index][1] * 100) - change) < 0) {
                registerStatus.status = "OPEN";
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push((cid[index][1] * 100)/ 100);
                currentStatus.push(changeStatusArr);
                change = change - (cid[index][1] * 100);
                registerStatus.change = currentStatus;
              };
            } else if (denominations[index] === denominations[6]) {
              //console.log((cid[index][1] * 100) - change);
              if (((cid[index][1] * 100) - change) < 0) {
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push((cid[index][1] * 100)/ 100);
                currentStatus.push(changeStatusArr);
                change = change - (cid[index][1] * 100);
                registerStatus.change = currentStatus;
              };
            } else if (denominations[index] === denominations[5]) {
              //console.log((cid[index][1] * 100) - change);
              if (((cid[index][1] * 100) - change) >= 500 && change <= 2000 && (1500 - change) < 0) {
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(1500/ 100);
                currentStatus.push(changeStatusArr);
                change = change - 1500;
                registerStatus.change = currentStatus;
              };
            } else if (denominations[index] === denominations[4]) {
              //console.log((cid[index][1] * 100) - change);
              if (((cid[index][1] * 100) - change) >= 100 && change <= 500 && (change - 300) < 0) {
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(100/ 100);
                currentStatus.push(changeStatusArr);
                change = change - 100;
                registerStatus.change = currentStatus;
              };
            } else if (denominations[index] === denominations[3]) {
              //console.log((cid[index][1] * 100) - change);
              if (((cid[index][1] * 100) - change) >= 100 && change <= 500 && (change - 100) < 0) {
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(50/ 100);
                currentStatus.push(changeStatusArr);
                change = change - 50;
                registerStatus.change = currentStatus;
              };
            } else if (denominations[index] === denominations[2]) {
              //console.log((cid[index][1] * 100) - change);
              if (((cid[index][1] * 100) - change) >= 100 && change <= 40 && (change - 30) < 0) {
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(20/ 100);
                currentStatus.push(changeStatusArr);
                change = change - 20;
                registerStatus.change = currentStatus;
                
              };
              console.log(change);
              
            } 
            
        } else if (denominations[index][0] === denominations[0][0] && change <= 50) {
                let finalChange = (cid[index][1] * 100) - change;
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(change/ 100);
                currentStatus.push(changeStatusArr);
                console.log(finalChange);
                registerStatus.change = currentStatus;
        }
        console.log((denominations[index][0]));
      };
    index -= 1;
  };

  //console.log(registerStatus);
  //console.log(Object.keys(registerStatus));
  //console.log(Object.keys(currentCOH));
  
  return registerStatus;
}

let result = checkCashRegister(3.26, 100, 
[["PENNY", 1.01], 
["NICKEL", 2.05], 
["DIME", 3.1], 
["QUARTER", 4.25], 
["ONE", 90], 
["FIVE", 55], 
["TEN", 20], 
["TWENTY", 60], 
["ONE HUNDRED", 100]]);
console.log(result);
///////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FINAL SOLUTION CODE
function checkCashRegister(price, cash, cid) {
  const denominations = [["PENNY", 1], 
["NICKEL", 5], 
["DIME", 10], 
["QUARTER", 25], 
["ONE", 100], 
["FIVE", 500], 
["TEN", 1000], 
["TWENTY", 2000], 
["ONE HUNDRED", 10000]];
  let totalStartCID = ((cid[0][1] * 100) + (cid[1][1] * 100) + 
  (cid[2][1] * 100) + (cid[3][1] * 100) + 
  (cid[4][1] * 100) + (cid[5][1] * 100) + 
  (cid[6][1] * 100) + (cid[7][1] * 100) + (cid[8][1] * 100));
  
  let change = (cash * 100) - (price * 100);
  let balanceCID = totalStartCID - change;
  
  let currentCOH = {};
  let registerStatus = {status: "", change: []};
  let currentStatus = [];
  
  if (balanceCID === 0) {
            registerStatus.status = "CLOSED";
            registerStatus.change = cid;
            return registerStatus;
  };
  if ((balanceCID / 100) - 1 < 0 ) {
            registerStatus.status = "INSUFFICIENT_FUNDS";
            registerStatus.change = currentStatus;
            return registerStatus;
  };
  
  cid.forEach(function(currentStatus){
      currentCOH[currentStatus[0]] = currentStatus[1];
  });
  
  
  let index = denominations.length - 1;
  while (index >= 0) {
    let changeStatusArr = [];
    
    if (change - denominations[index][1] >= 0){
      if (change / denominations[index][1] !== change && 
          change / denominations[index][1] <= denominations[index][1] &&
          change / denominations[index][1] !== denominations[index][1] / 2) {
            if (denominations[index] === denominations[3] && change <= 50) {
              
                (cid[index][1] * 100) - change;
                registerStatus.status = "OPEN";
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(change / 100);
                currentStatus.push(changeStatusArr);
                change = change - (cid[index][1] * 100);
                registerStatus.change = currentStatus;
            } else if (denominations[index] === denominations[7]) {
                
              
              if (((cid[index][1] * 100) - change) < 0) {
                registerStatus.status = "OPEN";
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push((cid[index][1] * 100)/ 100);
                currentStatus.push(changeStatusArr);
                change = change - (cid[index][1] * 100);
                registerStatus.change = currentStatus;
              };
            } else if (denominations[index] === denominations[6]) {
              
              if (((cid[index][1] * 100) - change) < 0) {
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push((cid[index][1] * 100)/ 100);
                currentStatus.push(changeStatusArr);
                change = change - (cid[index][1] * 100);
                registerStatus.change = currentStatus;
              };
            } else if (denominations[index] === denominations[5]) {
              
              if (((cid[index][1] * 100) - change) >= 500 && change <= 2000 && (1500 - change) < 0) {
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(1500/ 100);
                currentStatus.push(changeStatusArr);
                change = change - 1500;
                registerStatus.change = currentStatus;
              };
            } else if (denominations[index] === denominations[4]) {
              
              if (((cid[index][1] * 100) - change) >= 100 && change <= 500 && (change - 300) < 0) {
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(100/ 100);
                currentStatus.push(changeStatusArr);
                change = change - 100;
                registerStatus.change = currentStatus;
              };
            } else if (denominations[index] === denominations[3]) {
              
              if (((cid[index][1] * 100) - change) >= 100 && change <= 500 && (change - 100) < 0) {
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(50/ 100);
                currentStatus.push(changeStatusArr);
                change = change - 50;
                registerStatus.change = currentStatus;
              };
            } else if (denominations[index] === denominations[2]) {
              
              if (((cid[index][1] * 100) - change) >= 100 && change <= 40 && (change - 30) < 0) {
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(20/ 100);
                currentStatus.push(changeStatusArr);
                change = change - 20;
                registerStatus.change = currentStatus;
                
              };
              
            } 
            
        } else if (denominations[index][0] === denominations[0][0] && change <= 50) {
                
                changeStatusArr.push(denominations[index][0]);
                changeStatusArr.push(change/ 100);
                currentStatus.push(changeStatusArr);
                registerStatus.change = currentStatus;
        }
          
      };
    index -= 1;
  };
  
  return registerStatus;
}

let result = checkCashRegister(19.5, 20, 
[["PENNY", 0.5], 
["NICKEL", 0], 
["DIME", 0], 
["QUARTER", 0], 
["ONE", 0], 
["FIVE", 0], 
["TEN", 0], 
["TWENTY", 0], 
["ONE HUNDRED", 0]]);
console.log(result);
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\PASSES THE TEST

//OUTPUT:
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Sixth Analysis Output
375
OPEN
3.75
2
[ [ 'QUARTER', 0.5 ] ]
{ status: 'OPEN', change: [ [ 'QUARTER', 0.5 ] ] }
[ 'status', 'change' ]
[ 'PENNY',
  'NICKEL',
  'DIME',
  'QUARTER',
  'ONE',
  'FIVE',
  'TEN',
  'TWENTY',
  'ONE HUNDRED' ]
{ status: 'OPEN', change: [ [ 'QUARTER', 0.5 ] ] }
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////Seventh Analysis Output
9674
238.67
-3674
3674
[ [ 'TWENTY', 60 ] ]
-1674
[ [ 'TWENTY', 60, 'TEN', 20 ] ]
{ status: 'OPEN', change: [ [ 'TWENTY', 60, 'TEN', 20 ] ] }
[ 'status', 'change' ]
[ 'PENNY',
  'NICKEL',
  'DIME',
  'QUARTER',
  'ONE',
  'FIVE',
  'TEN',
  'TWENTY',
  'ONE HUNDRED' ]
{ status: 'OPEN', change: [ [ 'TWENTY', 60, 'TEN', 20 ] ] }
/////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\Eighth Analysis Output
{ status: 'OPEN',
  change: 
   [ [ 'TWENTY', 60 ],
     [ 'TEN', 20 ],
     [ 'FIVE', 15 ],
     [ 'ONE', 1 ],
     [ 'QUARTER', 0.5 ],
     [ 'DIME', 0.2 ],
     [ 'PENNY', 0.04 ] ] }
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



