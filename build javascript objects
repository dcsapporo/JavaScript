//You may have heard the term 'object' before. Objects are similar to 'arrays', except that instead of using indexes to access and 
// modify their data, you access the data in objects through what are called 'properties'.
//Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.
//Here's a sample cat object:
//    const cat = {
//        "name": "Whiskers",
//        "legs": 4,
//        "tails": 1,
//        "enemies": ["Water", "Dogs"]
//     };
//In this example, all the properties are stored as strings, such as 'name', 'legs', and 'tails'. However, you can also use numbers as properties.
//You can even omit the quotes for single-word string properties, as folows:
//     const anotherObject = {
//        make: "Ford",
//        5: "five,
//        "model": "focus"
//     };
//However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.

const myDog = {
  // Only change code below this line
  name: "Pablo",
  legs: 4,
  tails: 1,
  friends: ["Other Dogs", "Children", "Adults", "Cats", "Cars"]

  // Only change code above this line
};

//There are two ways to access the properties of an object: dot notation '.' and braket notation '[]', similar to an array.
//Dot notation is what you use when you know the name of the property you're trying to access ahead of time.
//Here is a sample of using dot notation '.' to read an object's property:
//    const myObj = {
//      prop1: "val1",
//      prop2: "val2"
//    };
//
//    const prop1val = myObj.prop1;
//    const prop2val = myObj.prop2;
//example code:
// Setup
const testObj = {
  "hat": "ballcap",
  "shirt": "jersey",
  "shoes": "cleats"
};

// Only change code below this line
const hatValue = testObj.hat;      // Change this line
const shirtValue = testObj.shirt;    // Change this line

//The second way to access the properties of an object is bracket notation '[]'. If the property of the object you are trying to access has a space
// in its name, you will need to use bracket notation.
//However, you can still use bracket notation on object properties without spaces. Here is a sample of using bracket notation to read an object's
// property:
//    const myObj = {
//      "Space Name": "Kirk",
//      "More Space": "Spock",
//      "NoSpace": "USS Enterprise"
//    };
//    myObj["Space Name"];
//    myObj['More Space'];
//    myObj["NoSpace"];
//'myObj["Space Name"]' would be the string 'Kirk', 'myObj['More Space'] would be the string 'Spock', and 'myObj["NoSpace"]' would be the string
//'USS Enterprise'.
//Note that property names with spaces in them must be in quotes (single or double).
//example code:
// Setup
const testObj = {
  "an entree": "hamburger",
  "my side": "veggies",
  "the drink": "water"
};

// Only change code below this line
const entreeValue = testObj['an entree'];   // Change this line
const drinkValue = testObj['the drink'];    // Change this line

//Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful
// for iterating through an object's properties or when accessing a lookup table.
//Here is an example of using a variable to access a property:
//    const dogs = {
//      Fido: "Mutt",
//      Hunter: "Doberman",
//      Snoopie: "Beagle"
//    };
//    const myDog = "Hunter";
//    const myBreed = dogs[myDog];
//    console.log(myBreed);
//The string 'Doberman' would be displayed in the console.
//Another way you can use this concept is when the property's name is collected dynamically during the program execution, as follows:
//    const someObj = {
//      propName: "John"
//    };
//    function propPrefix(str) {
//      const s = "prop";
//      return s + str;
//    }
//    const someProp = propPrefix("Name");
//    console.log(someObj[someProp]);
//'someProp' would have a value of the string 'propName', and the string 'John' would be displayed in the console.
//Note that we do not use quotes around the variable name when using it to access the property because we are using the value of the variable,
// not the name.
//example code:
// Setup
const testObj = {
  12: "Namath",
  16: "Montana",
  19: "Unitas"
};

// Only change code below this line
const playerNumber = 16;  // Change this line
const player = testObj[playerNumber];   // Change this line

//After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can
// use either dot or bracket notation to update.
//For example, let's look at 'ourDog':
//    const ourDog = {
//      "name": "Camper",
//      "legs": 4,
//      "tails": 1,
//      "friends": ["everything!"]
//    };
//Since he's a particularly happy dog, let's change his name to the string 'Happy Camper'.  Here's how we update his object's name property:
// 'ourDog.name = "Happy Camper";' or 'ourDog["name"] = "Happy Camper";' 
//Now when we evaluate 'ourDog.name', instead of getting 'Camper', we'll get his new name, 'Happy Camper'.
//example code:
// Setup
const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

// Only change code below this line
myDog["name"] = "Happy Coder";

//You can add new properties to existing JavaScript objects the same way you would modify them.
//Here's how we would add a 'bark' property to 'ouDog':
//      ourDog.bark = "bow-wow";
//or
//      ourDog["bark"] = "bow-wow";
//Now when we evaluate 'ourDog.bark', we'll get his bark, 'bow-wow'.
//Example:
//    const ourDog = {
//      "name": "Camper",
//      "legs": 4,
//      "tails": 1,
//      "friends": ["everything!"]
//    };
//    ourDog.bark = "bow-wow";
//example code:
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};
myDog.bark = "woof";

//We can also delete properties from objects like this:
//        delete ourDog.bark;
//example code:
// Setup
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"],
  "bark": "woof"
};

// Only change code below this line
delete myDog.tails;

//Objects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to lookup values
// rather than a 'switch' statement or an 'if/else' chain.  This is most useful when you know that your input data is limited to a certain range.
//Here is an example of a simple reverse alphabet lookup:
//    const alpha = {
//      1: "Z",
//      2: "Y",
//      3: "X",
//      4: "W",
//and so on ...
//      24: "C",
//      25: "B",
//      26: "A"
//    };
//    alpha[2];
//    alpha[24];
//    const value = 2;
//    alpha[value];
//'alpha[2]' is the string 'Y', 'alpha[24]' is the string 'C', and 'alpha[value]' is the string 'Y'.
//example code:
//original:
// Setup
//function phoneticLookup(val) {
//  let result = "";
//
  // Only change code below this line
//  switch(val) {
//    case "alpha":
//      result = "Adams";
//      break;
//    case "bravo":
//      result = "Boston";
//      break;
//    case "charlie":
//      result = "Chicago";
//      break;
//    case "delta":
//      result = "Denver";
//      break;
//    case "echo":
//      result = "Easy";
//      break;
//    case "foxtrot":
//      result = "Frank";
//  }
//
  // Only change code above this line
// return result;
//}
//
//phoneticLookup("charlie");
//changed:
// Setup
function phoneticLookup(val) {
  let result = "";

  // Only change code below this line
  const lookup = {
    "alpha": "Adams",
    "bravo": "Boston",
    "charlie": "Chicago",
    "delta": "Denver",
    "echo": "Easy",
    "foxtrot": "Frank"
  };
    result = lookup[val];

  // Only change code above this line
  return result;
}

phoneticLookup("charlie");

//Sometimes it is useful to check if the property of a given object exists or not. We can use the '.hasOwnProperty(propname)' method
// of objects to determine if that object has the given property name. '.hasOwnProperty()' returns 'true' or 'false' if the property is found or not.
//Example
//    const myObj = {
//      top: "hat",
//      bottom: "pants"
//    };
//    myObj.hasOwnProperty("top");
//    myObj.hasOwnProperty("middle");
//The first '.hasOwnProperty' returns 'true', while the second returns 'false'.
//example code:
//original:
//function checkObj(obj, checkProp) {
  // Only change code below this line
//  return "Change Me!";
  // Only change code above this line
//}
//Modify the function checkObj to test if an object passed to the function (obj) contains a specific property (checkProp). 
//If the property is found, return that property's value. If not, return "Not Found".
//changed code:
function checkObj(obj, checkProp) {
  // Only change code below this line
  if (obj.hasOwnProperty(checkProp)) { 
    return obj[checkProp];
  } else
  
  return "Not Found";
  // Only change code above this line
}

//Sometimes you may want to store data in a flexible Data Structure. A JavaScript object is one way to handle flexible data. They allow
// for arbitrary combinations of strings, numbers, booleans, arrays, functions, and objects.
//Here's and example of a complex data structure:
//    const ourMusic = [
//      {
//        "artist": "Daft Punk",
//        "title": "Homework",
//        "release_year": 1997,
//        "formats": [ "CD", "Cassette", "LP" ],
//        "gold": true
//       }
//      ];
//This is an array which contains one object inside. The object has various pieces of 'metadata' about an album. It also has a nested 'formats' array.
//If you want to add more album records, you can do this by adding records to the top level array. Objects hold data in a property, which 
// has a key-value format. In the example above, '"artist": "Daft Punk"' is a property that has a key of 'artist' and a value of 'Daft Punk'.
//NOTE: You will need to place a comma after every object in the array, unless it is the last object in the array.
//practice:
//Add a new album to the myMusic array. Add artist and title strings, release_year number, and a formats array of strings.
// original code:
//const myMusic = [
//  {
//    "artist": "Billy Joel",
//    "title": "Piano Man",
//    "release_year": 1973,
//    "formats": [
//      "CD",
//      "8T",
//      "LP"
//    ],
//    "gold": true
//  }
//];
//the changed code:
const myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [
      "CD",
      "8T",
      "LP"
    ],
    "gold": true
  },
  {
    "artist": "Daft Punk",
    "title": "Homework",
    "release_year": 1997,
    "formats": [
      "CD",
      "Cassette",
      "LP"
    ],
    "gold": true
  }
];

//The sub-properties of objects can be accessed by chaining together the dot or bracket notation.
//Here is a nested object:
//    const ourStorage = {
//      "desk": {
//        "drawer": "stapler"
//      },
//      "cabinet": {
//         "top drawer": {
//            "folder1": "a file",
//            "folder2": "secrets"
//          },
//          "bottom drawer": "soda"
//      }
//    };
//    ourStorage.cabinet["top drawer"].folder2;
//    ourStorage.desk.drawer;
//'ourStorage.cabinet["top drawer"].folder2' would be the string 'secrets', and 'ourStorage.desk.drawer would be the string 'stapler'.
//practice coding:
//Access the myStorage object and assign the contents of the glove box property to the gloveBoxContents variable.
//Use dot notation for all properties where possible, otherwise use bracket notation.
//original code:
//const myStorage = {
//  "car": {
//    "inside": {
//      "glove box": "maps",
//      "passenger seat": "crumbs"
//     },
//    "outside": {
//      "trunk": "jack"
//    }
//  }
//};

//const gloveBoxContents = undefined;
//changed code:
const myStorage = {
  "car": {
    "inside": {
      "glove box": "maps",
      "passenger seat": "crumbs"
     },
    "outside": {
      "trunk": "jack"
    }
  }
};

const gloveBoxContents = myStorage.car.inside["glove box"];

//As we have seen in earlier examples, objects can contain both nested objects and nested arrays. Similar to accessing nested objects,
// array bracket notation can be chained to access nested arrays.
//Here is an example of how to access a nested array:
//    const ourPets = [
//      {
//        animalType: "cat",
//        names: [
//          "Meowzer",
//          "Fluffy",
//          "Kit-Cat"
//        ]
//       },
//      {
//        animalType: "dog",
//        names: [
//          "Spot",
//          "Bowser",
//          "Frankie"
//         ]
//       }
//      ];
//    ourPets[0].names[1];
//    ourPets[1].names[0];
//'ourPets[0].names[1]' would be the string 'Fluffy', and 'ourPets[1].names[0]' would be the string 'Spot'.
//practice coding:
//Using dot and bracket notation, set the variable secondTree to the second item in the trees list from the myPlants object.
//original code:
//const myPlants = [
//  {
//    type: "flowers",
//    list: [
//      "rose",
//      "tulip",
//      "dandelion"
//    ]
//  },
//  {
//    type: "trees",
//    list: [
//      "fir",
//      "pine",
//      "birch"
//    ]
//  }
//];

//const secondTree = "";
//changed code:
const myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

const secondTree = myPlants[1].list[1];
