//Example of simple 'true' and 'false' operations using 'if'
function trueOrFalse(wasThatTrue) {
  // Only change code below this line
  if (wasThatTrue) {
    return "Yes, that was true";
  };
  
  return "No, that was false";

  // Only change code above this line

};

//Introduction of the '==' equality operator will perform a type conversion
// Setup
function testEqual(val) {
  if (val == 12) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

testEqual(10);

//The STRICT EQUALITY operator '===' compares datatypes
// Setup
function testStrict(val) {
  if (val === 7) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

testStrict(10);

//'typeof' is used to determine the dattype of a variable
// Setup
function compareEquality(a, b) {
  if (a === b) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

compareEquality(10, "10");

//The inequality operator '!=' (like a NOT gate or Inverter)
// Setup
function testNotEqual(val) {
  if (val != 99) { // Change this line
    return "Not Equal";
  }
  return "Equal";
}

testNotEqual(10);

//The strict inequality operator '!=='
// Setup
function testStrictNotEqual(val) {
  if (val !== 17) { // Change this line
    return "Not Equal";
  }
  return "Equal";
}

testStrictNotEqual(10);

//The greater than operator '>' (converts data types)
function testGreaterThan(val) {
  if (val > 100) {  // Change this line
    return "Over 100";
  }

  if (val > 10) {  // Change this line
    return "Over 10";
  }

  return "10 or Under";
}

testGreaterThan(10);

//The greater than or equal to operator '>=' (converts data types)
function testGreaterOrEqual(val) {
  if (val >= 20) {  // Change this line
    return "20 or Over";
  }

  if (val >= 10) {  // Change this line
    return "10 or Over";
  }

  return "Less than 10";
}

testGreaterOrEqual(10);
//The less than operator '<'
function testLessThan(val) {
  if (val < 25) {  // Change this line
    return "Under 25";
  }

  if (val < 55) {  // Change this line
    return "Under 55";
  }

  return "55 or Over";
}

testLessThan(10);

//The less than or equal to operator '<='
function testLessOrEqual(val) {
  if (val <= 12) {  // Change this line
    return "Smaller Than or Equal to 12";
  }

  if (val <= 24) {  // Change this line
    return "Smaller Than or Equal to 24";
  }

  return "More Than 24";
}

testLessOrEqual(10);

//The logical AND operator '&&' returns 'true' only if the 'operands' to the left and right of it are true
function testLogicalAnd(val) {
  // Only change code below this line

  if (val >= 25 && val <= 50) {
    
      return "Yes";
    
  }

  // Only change code above this line
  return "No";
}

testLogicalAnd(10);

//The logical OR operator '||' returns 'true' if either of the 'operands' is 'true'
function testLogicalOr(val) {
  // Only change code below this line

  if (val > 20 || val < 10) {
    return "Outside";
  }


  // Only change code above this line
  return "Inside";
}

testLogicalOr(15);

//Introduction of the 'else'
function testElse(val) {
  let result = "";
  // Only change code below this line

  if (val > 5) {
    result = "Bigger than 5";
  }
  else {
    result = "5 or Smaller"; //The can reduce the need for comparison operators and extra 'if' condition like (val <= 5) in this case
  }

  // Only change code above this line
  return result;
}

testElse(4);

//Chaining multiple conditions using 'else if'
function testElseIf(val) {
  if (val > 10) {
    return "Greater than 10";
  }

  else if (val < 5) {
    return "Smaller than 5";
  }
  else {
  return "Between 5 and 10";
  }
}

testElseIf(7);

//Be careful or the order of execution when using 'if, else if' statements
//Example one is bad
function orderMyLogic(val) {
  if (val < 10) {
    return "Less than 10";
  } else if (val < 5) {
    return "Less than 5";
  } else {
    return "Greater than or equal to 10";
  }
}

orderMyLogic(7); 
// corrected code
function orderMyLogic(val) {
  if (val < 5) {
    return "Less than 5";
  } else if (val < 10) {
    return "Less than 10";
  } else {
    return "Greater than or equal to 10";
  }
}

orderMyLogic(7);

//chained 'if / else if' statements
function testSize(num) {
  // Only change code below this line
  if (num < 5){
    return "Tiny"
  } else if (num < 10) {
    return "Small"
  } else if (num < 15) {
    return "Medium"
  } else if (num < 20) {
    return "Large"
  } else if (num >= 20) {
    return "Huge"
  } else 
  {return "Change Me";}
  // Only change code above this line
}

//In the game of Golf, each hole has a 'par', meaning, the average number of 'strokes' a golfer is expected to make in order to sink
// the ball in the hole to complete the play. Depending on how far above or below 'par' your 'strokes' are, there is a different nickname.

//Your function will be passed 'par' and 'strokes' arguments. Return the correct string according to this table which lists
//the strokes in order of priority; top(highest) to bottom (lowest):
const names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];

function golfScore(par, strokes) {
  // Only change code below this line
  if (strokes == 1 && par == par) {
    return names[0];
  } else if (strokes <= par - 2) {
    return names[1];
  } else if (strokes == par -1 ) {
    return names[2];
  } else if (strokes == par) {
    return names[3];
  } else if (strokes == par + 1) {
    return names[4];
  } else if (strokes == par + 2) {
    return names[5];
  } else if (strokes >= par + 3) {
    return names[6];
  } else

  return "Change Me";
  // Only change code above this line
}

golfScore(5, 4);

//If you have many options to choose from, use a 'switch' statement. A 'switch' statement tests a value and can have many 'case' statements 
//which define various possible values. Statements are executed from the first matched 'case' value until a 'break' is encountered.
//'case' values are tested with strict equality (===). The 'break' tells JavaScript to stop executing statements. If the 'break' is
//omitted, the next statement will be executed.
function caseInSwitch(val) {
  let answer = "";
  // Only change code below this line
  switch (val) {
    case 1:
    answer = "alpha";
    break;
    case 2:
    answer = "beta";
    break;
    case 3:
    answer = "gamma";
    break;
    case 4:
    answer = "delta";
    break;
  }


  // Only change code above this line
  return answer;
}

caseInSwitch(1);

//In a 'switch' statement you may not be able to specify all possible values as 'case' statements. Instead, you can
//add the 'default' statement which will be executed if no matching 'case' statements are found. Think of it like the 
//finla 'else' statement in an 'if / else' chain. A 'default' statement should be the last case.
function switchOfStuff(val) {
  let answer = "";
  // Only change code below this line
  switch (val) {
    case "a":
    answer = "apple";
    break;
    case "b":
    answer = "bird";
    break;
    case "c":
    answer = "cat";
    break;
    default:
    answer = "stuff"
    break;
  }


  // Only change code above this line
  return answer;
}

switchOfStuff(1);
//If the 'break' statemnet is omitted from a 'switch' statement's 'case', the following 'case' statement(s) are executed until a 'break'
//is encountered. If you have multiple inputs with the same output, you can represent them in a 'switch' statement like this:
// let result = "";
// switch (val) {
//    case 1:
//    case 2:
//    case 3:
//      result = "1, 2, or 3";
//      break;
//    case 4:
//      result = "4 ALONE";
//   }
//Case for 1, 2, and 3 will all produce the same result.
function sequentialSizes(val) {
  let answer = "";
  // Only change code below this line
  switch (val) {
    case 1:
    case 2:
    case 3:
      answer = "Low";
      break;
    case 4:
    case 5:
    case 6:
      answer = "Mid";
      break;
    case 7:
    case 8:
    case 9:
      answer = "High";
  }


  // Only change code above this line
  return answer;
}

sequentialSizes(1);
//If you have many options to choose from, a 'switch' statement can be easier to write than many chained 'if / else if'
//statements. 
// example: changing the following code to 'switch'
function chainToSwitch(val) {
  let answer = "";
  // Only change code below this line

  if (val === "bob") {
    answer = "Marley";
  } else if (val === 42) {
    answer = "The Answer";
  } else if (val === 1) {
    answer = "There is no #1";
  } else if (val === 99) {
    answer = "Missed me by this much!";
  } else if (val === 7) {
    answer = "Ate Nine";
  }

  // Only change code above this line
  return answer;
}

chainToSwitch(7);

//the changed code:
function chainToSwitch(val) {
  let answer = "";
  // Only change code below this line
    switch (val) {
    case "bob":
      answer = "Marley";
      break;
    case 42:
      answer = "The Answer";
      break;
    case 1:
      answer = "There is no #1";
      break;
    case 99:
      answer = "Missed me by this much!";
      break;
    case 7:
    answer = "Ate Nine";
  }

  // Only change code above this line
  return answer;
}

chainToSwitch(7);

//You may recall from "Comparsion with the Equality Operator" that all comparison operators return a boolean 'true' or 'false' value.
//Sometimes people use an 'if/else' statement to do a comparison, like this:
//  function isEqual(a, b) {
//    if (a === b) {
//      return true;
//     } else {
//       return false;
//     }
//    }
//But there's a better way to do this. Since '===' returns 'true' or 'false', we can return the result of the comparison:
//  function isEqual(a, b) {
//    return a === b;
//  }
//Example code to change:
function isLess(a, b) {
  // Only change code below this line
  if (a < b) {
    return true;
  } else {
    return false;
  }
  // Only change code above this line
}

isLess(10, 15);

//the changed code:
function isLess(a, b) {
  // Only change code below this line
  return a < b;
  // Only change code above this line
}

isLess(10, 15);

//When a 'return' statement is reached, the execution of the current function stops and control returns to the calling location.
//EXAMPLE
//  function myFun() {
//    console.log("Hello");
//    return "World";
//    console.log("byebye");
//  }
//  myFun();
//The above will display the string 'Hello' in the console, and return the string 'World'. The string 'byebye' will never
//display in the console, because the function exits at the 'return' statement.
//Example code exrecise:
// Setup
function abTest(a, b) {
  // Only change code below this line



  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);
//The addition:
/ Setup
function abTest(a, b) {
  // Only change code below this line
  if (a < 0 || b < 0) {
      return;
  }
  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);



