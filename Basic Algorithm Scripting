//An algorithm is a series of step-by-step instructions that describe how to do something.

//To write an effective algorithm, it helps to break a problem down into smaller parts and think carefully about how to solve each part with code.

//In this course, you'll learn the fundamentals of algorithmic thinking by writing algorithms that do everything from 
//    converting temperatures to handling complex 2D arrays.


//Convert Celsius to Fahrenheit
//The formula to convert from Celsius to Fahrenheit is the temperature in Celsius times '9/5', plus '32'.

//You are given a variable 'celsius' representing a temperature in Celsius. 
//Use the variable 'fahrenheit' already defined and assign it the Fahrenheit temperature equivalent to the given Celsius temperature. 
//Use the formula mentioned above to help convert the Celsius temperature to Fahrenheit.

//UNCHANGED CODE:

//    function convertToF(celsius) {
//      let fahrenheit;
//      return fahrenheit;
//    }

//    convertToF(30);

//CHANGED CODE:

function convertToF(celsius) {
  let fahrenheit = (celsius * (9 / 5)) + 32;
  console.log(fahrenheit);
  return fahrenheit;
}

convertToF(30);

//OUTPUT: 86


//Reverse a String
//Reverse the provided string.

//You may need to turn the string into an array before you can reverse it.

//Your result must be a string.

//UNCHANGED CODE:

//    function reverseString(str) {
//      return str;
//    }

//    reverseString("hello");

//CHANGED CODE:
//Version 1:
function reverseString(str) {
  let reverseRegex = /[A-Za-z]/g;
  let result = str.match(reverseRegex);
  console.log(result);
  let reverseStr = [];
  reverseStr.push(str);
  console.log(reverseStr);
  
  
  console.log(str)
  return str;
}

reverseString("hello");

//Version 2:
function reverseString(str) {

  let reverseRegex = /[\w\s]/g;
  let result = str.match(reverseRegex);
  console.log(result);
  //let revStrArr = [];
  let revStrArr = result;
  console.log(revStrArr);

  return str;
}

reverseString("hello");

//Version 3:
function reverseString(str) {
  let reverseRegex = /[\w\s]/g;
  let result = str.match(reverseRegex);
  console.log(result);
  let reverseStr = [];
  reverseStr.push(str);
  //console.log(reverseStr);
  for (let i =0; i < result.length; i++) {
    //while (i < result.length)
    {
      let resultA = result;
      let resultB = result.pop();
      let j = 0;
      //console.log(resultB)
      resultA.splice(j, i, resultB);
      console.log(resultA);
    }
  }
  
  //console.log(str)
  return str;
}

reverseString("hello");

//Solution version:

function reverseString(str) {
  let reverseStr = "";
  for (let i = str.length - 1; i >= 0; i--) {
    reverseStr += str[i];
  }
  console.log(reverseStr)
  return str;
}

reverseString("hello");

function reverseString(str) {
  let reverseStr = str.split("");
  reverseStr.reverse();
  /*for (let i = str.length - 1; i >= 0; i--) {
    reverseStr += str[i];
  }*/
  console.log(reverseStr.join(""));
  return str;
}

reverseString("hello");

//Final solution with explanation:

function reverseString(str) {
  let revRegex = /[\w+\s?]/g;// This section of code using regular expressions is not needed except that it is used to create strArr array.
  let strArr = str.match(revRegex);// This array or variable can be simply created using the same technique applied to strArrC, 
      which is not truely an array but a string.
  //let strArrB = strArr.slice(); This is from an earlier attempt of trying to parse out the letters from the 
      array by making a copy to compare results and attempts.
  let strArrC = ('');// This form of reversing text uses the for loop that counts backwards, starting at the end of the string or array.
  let strRev = str.split('');// This variable is used for the built-in JS operations for reversing text; no need to use a for loop.
  strRev.reverse();// After parsing out the string into the variable strRev the built-in reverse function can be applied.
  for (let i = strArr.length - 1; i >= 0; i--){
    //strArrB += strArr[i];
    
    strArrC += str[i];   
  }
  //console.log(strArrB);
  console.log(strArrC);
  console.log(strRev.join(''));// Used to return the array back into text.
  return strArrC;
}

reverseString("hello");

//OUTPUT:
//Version 1:
[ 'h', 'e', 'l', 'l', 'o' ]
[ 'hello' ]
hello

//Version 2:
[ 'h', 'e', 'l', 'l', 'o' ]
[ 'h', 'e', 'l', 'l', 'o' ]

//Version 3:
[ 'h', 'e', 'l', 'l', 'o' ]
[ 'o', 'h', 'e', 'l', 'l' ]
[ 'l', 'h', 'e', 'l' ]
[ 'l', 'e' ]

//Solutions:  olleh

//Factorialize a Number
//Return the factorial of the provided integer.

//If the integer is represented with the letter 'n', a factorial is the product of all positive integers less than or equal to 'n'.

//Factorials are often represented with the shorthand notation 'n!'

//For example: '5! = 1 * 2 * 3 * 4 * 5 = 120'

//Only integers greater than or equal to zero will be supplied to the function.

//UNCHANGED CODE:

//    function factorialize(num) {
//      return num;
//    }

//    factorialize(5);

//CHANGED CODE:
//Version 1 experimenting:
function factorialize(num) {
  let numRegex = /\d+/g;
  let testNum = num.toString();
  let result = testNum.match(numRegex);
  console.log(result);
  if (num >= 0) {
    for (let i = 0; i <= num; i++){
      let newNum = i;
      let facPro = newNum * (i * (i-1));
      console.log(facPro); 
    }
  }
  return num;
}

factorialize(5);

//Final Version and Solution:
function factorialize(num) {
  let numRegex = /\d+\n!/g;
  let testNum = num.toString();
  let result = testNum.match(numRegex);
  //console.log(testNum.match(numRegex));
  //console.log(result);
  let newNum = [];
  if (num >= 0 ) {
    if (num === 0){
    for (let i = 0; i <= num; i++){
      newNum.push(i);   
      } 
    }
      for (let i = 1; i <= num; i++){
      newNum.push(i); 
    }
    console.log(newNum);
    let facPro = newNum.toString(); 
    console.log(facPro);
    let proResult = 1;
    for (let j = 1; j <= newNum.length; j++) {
      proResult = j * proResult;
      console.log(proResult);
      
    }
  return proResult;
  }
  return num;
}

factorialize(5);

//OUTPUT:
//Solution
[ 1, 2, 3, 4, 5 ]
1,2,3,4,5
1
2
6
24
120

//Find the Longest Word in a String
//Return the length of the longest word in the provided sentence.

//Your response should be a number.

//UNCHANGED CODE:

//    function findLongestWordLength(str) {
//      return str.length;
//    }

//    findLongestWordLength("The quick brown fox jumped over the lazy dog");

//CHANGED CODE:
//Start version:
function findLongestWordLength(str) {
  console.log(str.length);
  let longestWordRegex = /\w+/g;
  //console.log(str.match(longestWordRegex));
  let longestWord = str.match(longestWordRegex);
  console.log(longestWord);
  //Below is an attempt at configuring parameters throughwhich to compare array data lengths
  /*let longWordArr = [];
  let shortestCount = 0;
  let shorterCount = 0;
  let shortCount = 0;
  let bigCount = 0;
  let biggerCount = 0;
  let biggestCount = 0;
  let longCount = 0;
  let longerCount = 0;
  let longestCount = 0;*/
  let compareArr = [];
  for (let i = 0; i < longestWord.length; i++) {
    if (longestWord[i].length > 0) {
      compareArr.push(longestWord[i].length);
    }
    //Below is the first attempts at comparing each word's length within a given string
    /*if (longestWord[i].length === 1 && shortestCount === 0) {
        let wordA = 'shortest';
        shortestCount +=1;
        longWordArr.push(wordA);
        compareArr.push(longestWord[i].length);
        console.log(longestWord[i].length);
        console.log(wordA);
    }else if (longestWord[i].length === 2 && shorterCount === 0) {
        longWordArr.pop();
        let wordB = 'shorter';
        shorterCount +=1;
        longWordArr.push(wordB);
        compareArr.push(longestWord[i].length);
        console.log(longestWord[i].length);
        console.log(wordB);
    }else if (longestWord[i].length === 3 && shortCount === 0) {
        longWordArr.pop();
        let wordC = 'short';
        shortCount +=1;
        longWordArr.push(wordC);
        compareArr.push(longestWord[i].length);
        console.log(longestWord[i].length);
        console.log(wordC);
    }else if (longestWord[i].length === 4 && bigCount === 0) {
        longWordArr.pop();
        let wordD = 'big';
        bigCount +=1;
        longWordArr.push(wordD);
        compareArr.push(longestWord[i].length);
        console.log(longestWord[i].length);
        console.log(wordD);
    }else if (longestWord[i].length === 5 && biggerCount === 0) {
        longWordArr.pop();
        let wordE = 'bigger';
        biggerCount +=1;
        longWordArr.push(wordE);
        compareArr.push(longestWord[i].length);
        console.log(longestWord[i].length);
        console.log(wordE);
    }else if (longestWord[i].length === 6 && biggestCount === 0) {
        longWordArr.pop();
        let wordF = 'biggest';
        biggestCount +=1;
        longWordArr.push(wordF);
        compareArr.push(longestWord[i].length);
        console.log(longestWord[i].length);
        console.log(wordF);
    }else if (longestWord[i].length >= 7 && longestWord[i] <=10) {
        longWordArr.pop();
        let wordG = 'long';
        longWordArr.push(wordG);
        compareArr.push(longestWord[i].length);
        console.log(longestWord[i].length);
        console.log(wordG);
    }else if (longestWord[i].length >= 11 && longestWord[i] <=19) {
        longWordArr.pop();
        let wordH = 'longer';
        longWordArr.push(wordH);
        compareArr.push(longestWord[i].length);
        console.log(longestWord[i].length);
        console.log(wordH);
    }else if (longestWord[i].length >= 20 && longestWord[i] <=45) {
        longWordArr.pop();
        let wordI = 'longest';
        longWordArr.push(wordI);
        compareArr.push(longestWord[i].length);
        console.log(longestWord[i].length);
        console.log(wordI);
    }*/
    
  }
  console.log(compareArr.sort(function(a,b){return b-a})); //Here is the method to find the largest word within a given string
  let longestCompWord = compareArr.sort(function(a,b){return b-a});
  console.log(longestCompWord[0]);
  if (longestCompWord[0] > 0){
    return longestCompWord[0];
  }
  //console.log(longWordArr);
  //return str.length;
}

findLongestWordLength("The quick brown fox jumped over the lazy dog");



//OUTPUT:
44
[ 'The',
  'quick',
  'brown',
  'fox',
  'jumped',
  'over',
  'the',
  'lazy',
  'dog' ]
[ 6, 5, 5, 4, 4, 3, 3, 3, 3 ]
6

//Return Largest Numbers in Arrays
//Return an array consisting of the largest number from each provided sub-array. 
//For simplicity, the provided array will contain exactly 4 sub-arrays.

//Remember, you can iterate through an array with a simple for loop, and access each member with array syntax 'arr[i]'.


//UNCHANGED CODE:

//function largestOfFour(arr) {
//  return arr;
//}

//largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);

//CHANGED CODE:

function largestOfFour(arr) {
  //console.log(arr.length);
  /*let firstSubArr = arr.slice(0,1);
  firstSubArr.unshift(firstSubArr.toString());
  firstSubArr.pop();
  console.log(firstSubArr);

  let secondSubArr = arr.slice(1,2);
  secondSubArr.unshift(secondSubArr.toString());
  secondSubArr.pop();
  console.log(secondSubArr);

  let thirdSubArrOld = arr.slice(2,3);
  thirdSubArr.unshift(thirdSubArr.toString());
  thirdSubArr.pop();
  console.log(thirdSubArr);*/

  let largestFromEachSub = [];
  let largestFromForth = [];
  let largestFromThird = [];
  let largestFromSecond = [];
  let largestFromFirst = [];
  //let largestResult = [];

  let forthSubArr = arr.pop();
  console.log(forthSubArr);
  for (let g = 0; g < forthSubArr.length; g++) {
      largestFromForth = forthSubArr.sort(function(a,b){return b-a});      
  }
  console.log(largestFromForth);
  /*if (largestFromEachSub[0] >= 0) {
          console.log(largestResult.push(largestFromEachSub.shift()));
          //return largestResult;  
        }*/
  
  

  let thirdSubArr = arr.pop();
  console.log(thirdSubArr);
  for (let h = 0; h < thirdSubArr.length; h++) {
      largestFromThird = thirdSubArr.sort(function(a,b){return b-a});      
  }
  console.log(largestFromThird);

  let secondSubArr = arr.pop();
  console.log(secondSubArr);
  for (let i = 0; i < secondSubArr.length; i++) {
      largestFromSecond = secondSubArr.sort(function(a,b){return b-a});      
  }
  console.log(largestFromSecond);

  let firstSubArr = arr.pop();
  console.log(firstSubArr);
  for (let j = 0; j < firstSubArr.length; j++) {
      largestFromFirst = firstSubArr.sort(function(a,b){return b-a});      
  }
  console.log(largestFromFirst);
  console.log(largestFromFirst.indexOf(largestFromFirst[0]));
  largestFromEachSub.push(largestFromFirst[0]);
  console.log(largestFromEachSub);
  largestFromEachSub.push(largestFromSecond[0]);
  console.log(largestFromEachSub);
  largestFromEachSub.push(largestFromThird[0]);
  console.log(largestFromEachSub);
  largestFromEachSub.push(largestFromForth[0]);
  console.log(largestFromEachSub);
  return largestFromEachSub;

  /*for (let k = 0; k < arr.length; k++){
    if (largestFromFirst.indexOf(largestFromFirst[k]) === 0) {
      
    }
  }
  
    for (let j = 0; j < arr[i].length; j++){
      if (arr[0] === arr[i]){
        for (let k = 0; k < firstSubArr.length; k++) {
              console.log(firstSubArr);
            }
        //console.log(firstSubArr[i][j]);
      }
      //console.log(arr[i][j]);
    }
  */
  return arr;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);

//OUTPUT:
[ 1000, 1001, 857, 1 ]
[ 1001, 1000, 857, 1 ]
[ 32, 35, 37, 39 ]
[ 39, 37, 35, 32 ]
[ 13, 27, 18, 26 ]
[ 27, 26, 18, 13 ]
[ 4, 5, 1, 3 ]
[ 5, 4, 3, 1 ]
0
[ 5 ]
[ 5, 27 ]
[ 5, 27, 39 ]
[ 5, 27, 39, 1001 ]


//Confirm the Ending
//Check if a string (first argument, 'str') ends with the given target string (second argument, 'target').

//This challenge 'can' be solved with the '.endsWith()' method, which was introduced in ES2015. 
//But for the purpose of this challenge, we would like you to use one of the JavaScript substring methods instead.


//UNCHANGED CODE:

//    function confirmEnding(str, target) {
//      return str;
//    }

//    confirmEnding("Bastian", "n");

//CHANGED CODE:
//experimentation:
function confirmEnding(str, target) {
  console.log(str.length);
  let endRegex = /n$/;
  let result = str.match(endRegex);
  console.log(result);
  console.log(str[6].substr(target));
  let strRegex = /\w+\s?|n$/g;
  let strArr = str.match(strRegex);
  console.log(strArr);
  let strArrB = ('');
  let strArrC = ('');
  for (let i = str.length - 1; i >= 0; i--) {
    strArrB += str[i];
    /*for(let j = strArrB.length - 1; j >= 0; j--) {
        console.log(strArrC += str[j]);    
      }*/
      
      console.log(strArrB.length) 
  } console.log(strArrB);
  return str;
}

confirmEnding("Bastian", "n");

//more experimentation:
function confirmEnding(str, target) {
  let textCompare = str.search(target);
  console.log(textCompare);
   console.log(str.length);
  let endRegex = /n$/;
  let result = str.match(endRegex);
  //console.log(result);
  console.log(str[6].substr(target));
  let strRegex = /\w+\s?|n$/g;
  let strArr = str.match(strRegex);
  console.log(strArr);
  let strArrB = ('');
  let strArrC = ('');
  for (let i = str.length - 1; i >= 0; i--) {
    strArrB += str[i];
    /*for(let j = strArrB.length - 1; j >= 0; j--) {
        console.log(strArrC += str[j]);    
      }*/
      
      console.log(strArrB.length) 
  } console.log(strArrB);
  return str;
}

confirmEnding("Open sesame", "same");

//SOLUTION CODE:
function confirmEnding(str, target) {
  //console.log(str.lastIndexOf(target));
  let lastStrIndex = (str);
  //console.log(lastStrIndex);
  //console.log(str.match(/\w$/));
  //console.log(target.match(/\w$/))
  //console.log(str.lastIndexOf(target));
  let textCompare = str.search(target);
  //console.log(textCompare);
  let compLastCharA = str.match(/\w$/).shift();
  //console.log(compLastCharA);
  //console.log(str[str.length - 2]);
  let compSecLastChar = str[str.length - 2];
  //console.log(compSecLastChar);
  //console.log(target[target.length - 2])
  let compLastCharb = target.match(/\w$/).shift();
  //console.log(compLastCharb);
  if (str.search(target) > 0 ) {
    for (let i = 0; i < target.length ; i++) {
      
        if (compLastCharA === compLastCharb) 
       {
         if (target[target.length - 2] !== undefined && target[target.length - 2] === compSecLastChar) {
        console.log('true');
        return true;
        }
          if (target[target.length - 2] === undefined)
          {
        console.log('true');
        return true;
        }
      }  

    }
  }
  console.log(false);
  return false;

}

confirmEnding("Walking on water and developing software from a specification are easy if both are frozen", "specification");

//OUTPUT:
[ 'n', index: 6, input: 'Bastian', groups: undefined ]
n

7
11
e
[ 'Open ', 'sesame' ]
1
2
3
4
5
6
7
8
9
10
11
emases nepO

//SOLUTION OUTPUT: false


//Repeat a String Repeat a String
//Repeat a given string 'str' (first argument) for 'num' times (second argument). 
//Return an empty string if 'num' is not a positive number. 
//For the purpose of this challenge, do "not" use the built-in '.repeat()' method.


//UNCHANGED CODE:

//    function repeatStringNumTimes(str, num) {
//      return str;
//    }

//    repeatStringNumTimes("abc", 3);

//CHANGED CODE:

function repeatStringNumTimes(str, num) {
  if (num < 0) {
    console.log("")
    return "";
  }
  let repeatStr = "";
  for (let i = 1; i <= num; i++) {
    console.log(str);
    repeatStr += str;
    console.log(repeatStr);
    
  }
  return repeatStr;
}

repeatStringNumTimes("abc", 3);

//OUTPUT:
abc
abc
abc
abcabc
abc
abcabcabc


//Truncate a String
//Truncate a string (first argument) if it is longer than the given maximum string length (second argument). 
//Return the truncated string with a '...' ending.


//UNCHANGED CODE:

//    function truncateString(str, num) {
//      return str;
//    }

//    truncateString("A-tisket a-tasket A green and yellow basket", 8);

//CHANGED CODE:
//Experimentation:
function truncateString(str, num) {
  //let newStr = "..."
  //console.log(newStr);
  //let strArr = [str];
  //console.log(strArr);
  let beginningStr = str;
  if (num < str.length || num < str.length + 2) {
    let theBeginning = beginningStr.replace(str.substr(num), "...");
    console.log(theBeginning);
    console.log(str.slice(num));
    return theBeginning;
  } 
  return str;
}

truncateString("Peter Piper picked a peck of pickled peppers", 11);

//SOLUTION:
function truncateString(str, num) {
  //let newStr = "..."
  //console.log(newStr);
  //let strArr = [str];
  //console.log(strArr);
  let beginningStr = str;
  if (num !== str.length && num < str.length + 2) {
    let theBeginning = beginningStr.replace(str.substr(num), "...");
    console.log(theBeginning);
    console.log(str.slice(num));
    return theBeginning;
  } 
  return str;
}

truncateString("Peter Piper picked a peck of pickled peppers", 11);


//OUTPUT:   Peter Piper...

//Finders Keepers
//Create a function that looks through an array 'arr' and returns the first element in it that passes a 'truth test'. 
//This means that given an element 'x', the 'truth test' is passed if 'func(x)' is 'true'. 
//If no element passes the test, return 'undefined'.


//UNCHANGED CODE:

//    function findElement(arr, func) {
//      let num = 0;
//      return num;
//    }

//    findElement([1, 2, 3, 4], num => num % 2 === 0);

//CHANGED CODE:

function findElement(arr, func) {
  console.log((arr.valueOf()).length)
  let newNum = 0;
  let num = 0;
  for (let i = 0; i < (arr.valueOf()).length; i++) {
      console.log(arr.shift())
      newNum = arr.shift();
      console.log(newNum);
      console.log(func(newNum));
      if (func(newNum) === true) {
      num = newNum;
      } 
      if (func(newNum) !== true) {
          num = undefined;
      }
      
  } 
  console.log(num);
  return num;
  
}

findElement([1, 2, 3, 4], num => num % 2 === 0);

//OUTPUT:
4
1
2
true
3
4
true
4

//Boo who
//Check if a value is classified as a boolean primitive. 
//Return 'true' or 'false'.

//Boolean primitives are 'true' and 'false'.


//UNCHANGED CODE:

//    function booWho(bool) {
//      return bool;
//    }

//    booWho(null);

//CHANGED CODE:

function booWho(bool) {
  //console.log(bool.valueOf())
  
  if (bool === null) {
    console.log('false')
    return false;
  } else if (bool.valueOf() === true || bool.valueOf() === false) {
    console.log('true');
    return true;
  } 
  console.log('false')
  return false;
}

booWho(null);

//OUTPUT: false

//Title Case a Sentence
//Return the provided string with the first letter of each word capitalized. 
//Make sure the rest of the word is in lower case.

//For the purpose of this exercise, you should also capitalize connecting words like 'the' and 'of'.


//UNCHANGED CODE:

//    function titleCase(str) {
//      return str;
//    }

//    titleCase("I'm a little tea pot");

//CHANGE CODE:
//Experimentation:
function titleCase(str) {
  console.log(str.toUpperCase());
  console.log(str.toLowerCase());
  let newTitleStr = str.split(" ");
  console.log(newTitleStr);

  const updatedTitle = [];
  for (let st in newTitleStr) {
    updatedTitle[st] = newTitleStr[st][0].toUpperCase() + newTitleStr[st].slice(1).toLowerCase();
  } 
  console.log(updatedTitle.join(" "));
  //return updatedTitle.join(" ");

  
  /*let newStr = '';

  let firstLetter = str.match(/^\w/).shift();
  console.log(firstLetter);

  let strImArr = str.match(/\w+\W\w/);
  if (strImArr == "I\'m") { 
  newStr = strImArr.shift() + ' ';
  console.log(newStr.length);
  }

  let letterCountMatch = 0;
  let nullCount = 0;

  for (let i = 0; i < str.length; i++) {

    if (str[i].match(/^[a-z]/) !== null) {
      firstLetter = str[i].match(/[a-z]/).shift();
      console.log(firstLetter);
      letterCountMatch += 1;
     } 
     if (str[i].match(/^[a-z]/) === null || strImArr === "I\'m") {
        nullCount += 1;
        console.log(newStr + str[i].toUpperCase()); 
     }
    
    }
  console.log(str.length); 
  console.log(nullCount);
  console.log(letterCountMatch);*/
  return updatedTitle.join(" ");
}

titleCase("I'm a little tea pot");

//SOLUTION:

function titleCase(str) {
  //console.log(str.toUpperCase());
  //console.log(str.toLowerCase());
  let newTitleStr = str.split(" ");
  console.log(newTitleStr);

  const updatedTitle = [];
  for (let st in newTitleStr) {
    updatedTitle[st] = newTitleStr[st][0].toUpperCase() + newTitleStr[st].slice(1).toLowerCase();
  } 

  console.log(updatedTitle.join(" "));
  return updatedTitle.join(" ");
}

titleCase("I'm a little tea pot");

//OUTPUT:
//experimental:
I'M A LITTLE TEA POT
i'm a little tea pot
[ ' ',
  index: 3,
  input: 'I\'m a little tea pot',
  groups: undefined ]
 
I
3
3
3
3
-4
4
//SOLUTION:
[ 'I\'m', 'a', 'little', 'tea', 'pot' ]
I'm A Little Tea Pot


//Slice and Splice
//You are given two arrays and an index.

//Copy each element of the first array into the second array, in order.

//Begin inserting elements at index 'n' of the second array.

//Return the resulting array. 
//The input arrays should remain the same after the function runs.


//UNCHANGED CODE:

//    function frankenSplice(arr1, arr2, n) {
//      return arr2;
//    }

//    frankenSplice([1, 2, 3], [4, 5, 6], 1);

//CHANGE CODE:

function frankenSplice(arr1, arr2, n) {
  let newArr = arr2.slice();
  //let newArr2 = arr1.slice();
  //let newArr3 = newArr2.reverse();
  for (let i = 0; i < arr1.length; i++) {
     newArr.splice(n, 0, arr1[i]);
     n++; 
  }
  //let newArr4 = newArr.pop();
  //console.log(newArr)
  return newArr;
}

frankenSplice([1, 2, 3], [4, 5, 6], 1);

//OUTPUT:
[ 4, 1, 2, 3, 5 ]

//Falsy Bouncer
//Remove all falsy values from an array.

//Falsy values in JavaScript are 'false', 'null', '0', "", 'undefined', and 'NaN'.

//Hint: Try converting each value to a Boolean.


//UNCHANGED CODE:

//    function bouncer(arr) {
//      return arr;
//    }

//    bouncer([7, "ate", "", false, 9]);

//CHANGE CODE:

function bouncer(arr) {
  //console.log(arr.sort());
  //let sortedArr = arr.sort();
  //console.log(sortedArr);
  //let arrStr = arr.toString();
  //console.log(arrStr);
  let newArr = [];
  for (let i = 0; i < arr.length; i++) {
      if (arr[i] !== '' && arr[i] !== 0 && Boolean(arr[i]) !== false && arr[i] !== false && arr[i] !== undefined && arr[i] !== null) {
        
        console.log(newArr.push(arr[i]));
      } 
      newArr = newArr;
  }
  console.log(newArr)
  return newArr;
}

bouncer([7, "ate", "", false, 9]);

//OUTPUT:

1
2
3
[ 7, 'ate', 9 ]


//Where do I Belong
//Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. 
//The returned value should be a number.

//For example, 'getIndexToIns([1,2,3,4], 1.5)' should return '1' because it is greater than '1' (index 0), but less than '2' (index 1).

//Likewise, 'getIndexToIns([20,3,5], 19)' should return '2' because once the 
//    array has been sorted it will look like '[3,5,20]' and '19' is less than '20' (index 2) and greater than '5' (index 1).


//UNCHANGED CODE:

//    function getIndexToIns(arr, num) {
//      return num;
//    }

//    getIndexToIns([40, 60], 50);

//CHANGE CODE:



//OUTPUT:

//


//UNCHANGED CODE:



//CHANGE CODE:



//OUTPUT:

//


//UNCHANGED CODE:



//CHANGE CODE:



//OUTPUT:

